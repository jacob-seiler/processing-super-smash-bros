/**

    Jacob Seiler
    2/4/2016 - 15/6/2016
    Super Smash Bros.

    - Super Smash Bros. recreated for Khan Academy
    - Starring: Mario, Link, Kirby, Samus, Megaman, Pit and R.O.B.
    - Fight on multiple stages
    - Choose between time or stock mode
    - Multiple attack types
    * Rick-click to see instructions for each player

**/

// Version
var version = "1.0 FINAL";
var fps = 60;

// Setup
function setup() {
	createCanvas(400, 400);
	frameRate(fps);
}

// What keys (on keyboard) are currently pressed (used for tracking multiple key presses simultaneously)
var keys = [];

// Stores game values including: state (current screen), map (level), and rules (settings)
var game = {
	state: 0,
	map: 0,
	rules: {
		mode: 0,
		lives: 3,
		time: 3
	}
};

// Stores values for each player including: controller (AI, Human or none), character, location, dmage, velocity, lives, size, sprite and color
var players = {
	one: {
		controller: 2,
		color: [230, 50, 50],

		character: {
			sprite: {
				type: 0,
				data: 0
			},
			size: 20,
			loc: [200, 200],
			velocity: [0, 0],
			lives: 5,
			damage: 0
		},

		keys: {
			up: 87,
			down: 83,
			left: 65,
			right: 68,
			standard: 69,
			special: 81
		}
	},
	two: {
		controller: 0,
		color: [75, 115, 230],

		character: {
			sprite: {
				type: 0,
				data: 1
			},
			size: 20,
			loc: [0, 0],
			velocity: [0, 0],
			lives: 5,
			damage: 0
		},

		keys: {
			up: 84,
			down: 71,
			left: 70,
			right: 72,
			standard: 89,
			special: 82
		}
	},
	three: {
		controller: 0,
		color: [230, 220, 60],

		character: {
			sprite: {
				type: 0,
				data: 2
			},
			size: 20,
			loc: [0, 0],
			velocity: [0, 0],
			lives: 5,
			damage: 0
		},

		keys: {
			up: 73,
			down: 75,
			left: 74,
			right: 76,
			standard: 79,
			special: 85
		}
	},
	four: {
		controller: 0,
		color: [80, 165, 40],

		character: {
			sprite: {
				type: 0,
				data: 2
			},
			size: 20,
			loc: [0, 0],
			velocity: [0, 0],
			lives: 5,
			damage: 0
		},

		keys: {
			up: 38, // Up arrow
			down: 40, // Down arrow
			left: 37, // Left arrow
			right: 39, // Right arrow
			standard: 190,
			special: 188
		}
	}
};

// Stores the function to draw every sprite in the game (total of 140)
var sprites = {
    // Stores values for how to draw the cursors
    cursor: {
        red: {
            draw: function(x, y, size) {
                fill(230, 50, 50);
                stroke(205, 25, 10);
                strokeWeight(size / 10);
                ellipse(x, y, size, size); // Draws the cursor
            }
        },
        blue: {
            draw: function(x, y, size) {
                fill(75, 115, 230);
                stroke(40, 80, 190);
                strokeWeight(size / 10);
                ellipse(x, y, size, size); // Draws the cursor
            }
        },
        green: {
            draw: function(x, y, size) {
                fill(80, 165, 40);
                stroke(55, 140, 0);
                strokeWeight(size / 10);
                ellipse(x, y, size, size); // Draws the cursor
            }
        },
        yellow: {
            draw: function(x, y, size) {
                fill(230, 220, 60);
                stroke(205, 195, 20);
                strokeWeight(size / 10);
                ellipse(x, y, size, size); // Draws the cursor
            }
        }
    },
    // Stores values for how to draw mario
    mario: {
        icon: {
            draw: function(x, y, size) {
                var xP = x; // The x value of the current pixel
                var yP = y; // The y value of the current pixel
                
                // Array of pixels, each value is a seperate color
                var pixels = [0,0,0,0,0,0,1,1,1,1,4,0,0,0,0,1,1,2,2,2,2,1,4,0,0,0,1,2,2,2,2,2,2,1,4,0,0,1,2,2,2,2,1,1,1,1,1,1,4,0,1,2,2,2,1,1,1,1,1,1,1,1,1,4,0,1,2,2,1,1,3,3,3,3,1,1,1,4,1,1,1,1,1,3,3,3,1,3,1,4,1,3,3,1,1,3,3,3,1,3,1,1,1,4,1,3,3,1,1,1,3,3,3,3,3,3,3,1,4,1,3,3,3,1,3,3,1,3,3,3,3,3,1,4,0,1,3,3,3,3,1,1,1,3,3,3,1,4,0,0,1,1,3,3,3,3,1,1,1,1,4,0,1,1,1,1,3,3,3,3,3,1,4,0,1,2,2,1,1,1,1,1,1,4,1,2,2,2,2,1,1,3,3,3,1,4,1,2,2,2,2,1,3,3,3,3,3,1,4,1,2,2,2,2,1,3,3,3,3,3,1,4,1,1,2,2,2,2,1,3,3,3,1,1,1,4,1,1,1,2,2,2,1,1,1,1,1,3,1,4,0,1,1,1,1,1,1,3,3,1,1,3,1];
                
                // Array values are drawn
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size); // Draws the pixel
                    xP+=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 14 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,1,1,1,1,0,0,0,0,4,0,0,0,0,1,1,2,2,2,2,1,0,0,0,4,0,0,0,1,2,2,2,2,2,2,1,0,0,0,4,0,0,1,2,2,2,2,1,1,1,1,1,1,0,4,0,1,2,2,2,1,1,1,1,1,1,1,1,1,4,0,1,2,2,1,1,3,3,3,3,1,1,1,0,4,1,1,1,1,1,3,3,3,1,3,1,0,0,0,4,1,3,3,1,1,3,3,3,1,3,1,1,1,0,4,1,3,3,1,1,1,3,3,3,3,3,3,3,1,4,1,3,3,3,1,3,3,1,3,3,3,3,3,1,4,0,1,3,3,3,3,1,1,1,3,3,3,1,0,4,0,0,1,1,3,3,3,3,1,1,1,1,0,0,4,0,1,1,1,1,3,3,3,3,3,1,0,0,0,4,0,1,2,2,1,1,1,1,1,1,0,0,0,0,4,1,2,2,2,2,1,1,3,3,3,1,0,0,0,4,1,2,2,2,2,1,3,3,3,3,3,1,0,0,4,1,2,2,2,2,1,3,3,3,3,3,1,0,0,4,1,1,2,2,2,2,1,3,3,3,1,1,1,0,4,1,1,1,2,2,2,1,1,1,1,1,3,1,0,4,0,1,1,1,1,1,1,3,3,1,1,3,1,0,4,0,1,1,1,1,1,1,1,1,1,1,1,1,0,4,0,1,1,1,1,1,1,1,1,1,1,1,0,0,4,0,1,1,1,1,1,1,1,1,1,1,1,0,0,4,0,0,1,1,1,1,1,1,1,1,1,0,0,0,4,0,0,1,2,2,2,2,2,1,0,0,0,0,0,4,0,0,1,2,2,2,2,2,2,1,0,0,0,0,4,0,0,1,1,1,1,1,1,1,1,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,1,1,1,1,0,0,0,0,4,0,0,0,0,1,1,2,2,2,2,1,0,0,0,4,0,0,0,1,2,2,2,2,2,2,1,0,0,0,4,0,0,1,2,2,2,2,1,1,1,1,1,1,0,4,0,1,2,2,2,1,1,1,1,1,1,1,1,1,4,0,1,2,2,1,1,3,3,3,3,1,1,1,0,4,1,1,1,1,1,3,3,3,1,3,1,0,0,0,4,1,3,3,1,1,3,3,3,1,3,1,1,1,0,4,1,3,3,1,1,1,3,3,3,3,3,3,3,1,4,1,3,3,3,1,3,3,1,3,3,3,3,3,1,4,0,1,3,3,3,3,1,1,1,3,3,3,1,0,4,0,0,1,1,3,3,3,3,1,1,1,1,0,0,4,0,1,1,1,1,3,3,3,3,3,1,0,0,0,4,0,1,2,2,1,1,1,1,1,1,0,0,0,0,4,1,2,2,2,2,1,1,3,3,3,1,0,0,0,4,1,2,2,2,2,1,3,3,3,3,3,1,0,0,4,1,2,2,2,2,1,3,3,3,3,3,1,0,0,4,1,1,2,2,2,2,1,3,3,3,1,1,1,0,4,1,1,1,2,2,2,1,1,1,1,1,3,1,0,4,0,1,1,1,1,1,1,3,3,1,1,3,1,0,4,0,1,1,1,1,1,1,1,1,1,1,1,1,0,4,0,1,1,1,1,1,1,1,1,1,1,1,0,0,4,0,1,1,1,1,1,1,1,1,1,1,1,0,0,4,0,0,1,1,1,1,1,1,1,1,1,0,0,0,4,0,0,1,2,2,2,2,2,1,0,0,0,0,0,4,0,0,1,2,2,2,2,2,2,1,0,0,0,0,4,0,0,1,1,1,1,1,1,1,1,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
                x-= 14 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,1,1,1,1,1,0,0,0,4,0,0,0,0,1,1,2,2,2,2,2,1,0,0,4,0,0,0,1,2,2,2,2,2,2,2,2,1,0,4,0,0,1,2,2,2,2,2,2,1,2,2,1,0,4,0,0,1,2,2,2,1,2,2,1,2,2,1,0,4,0,1,2,2,2,2,2,1,1,1,2,1,1,1,4,0,1,2,2,2,2,1,3,3,3,1,1,1,1,4,0,1,2,2,2,1,3,3,3,3,3,1,1,0,4,0,1,2,2,1,1,3,3,3,3,3,1,3,1,4,0,0,1,1,3,3,1,3,3,3,1,3,3,1,4,0,0,1,1,1,1,1,1,1,1,1,1,1,0,4,0,1,2,2,2,1,2,2,2,2,1,0,0,0,4,1,2,2,2,2,2,2,2,2,2,1,0,0,0,4,1,2,2,2,2,2,2,2,2,1,1,1,0,0,4,1,1,2,2,2,2,2,1,1,1,1,1,0,0,4,1,1,1,1,1,1,1,1,1,1,1,0,0,0,4,0,1,1,1,1,1,1,1,1,1,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        duckRight: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,1,1,1,1,1,0,0,0,4,0,0,0,0,1,1,2,2,2,2,2,1,0,0,4,0,0,0,1,2,2,2,2,2,2,2,2,1,0,4,0,0,1,2,2,2,2,2,2,1,2,2,1,0,4,0,0,1,2,2,2,1,2,2,1,2,2,1,0,4,0,1,2,2,2,2,2,1,1,1,2,1,1,1,4,0,1,2,2,2,2,1,3,3,3,1,1,1,1,4,0,1,2,2,2,1,3,3,3,3,3,1,1,0,4,0,1,2,2,1,1,3,3,3,3,3,1,3,1,4,0,0,1,1,3,3,1,3,3,3,1,3,3,1,4,0,0,1,1,1,1,1,1,1,1,1,1,1,0,4,0,1,2,2,2,1,2,2,2,2,1,0,0,0,4,1,2,2,2,2,2,2,2,2,2,1,0,0,0,4,1,2,2,2,2,2,2,2,2,1,1,1,0,0,4,1,1,2,2,2,2,2,1,1,1,1,1,0,0,4,1,1,1,1,1,1,1,1,1,1,1,0,0,0,4,0,1,1,1,1,1,1,1,1,1,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,
                4,0,0,0,0,0,1,1,2,2,2,1,1,3,3,3,1,
                4,0,0,0,0,1,2,2,2,2,2,2,1,3,3,3,1,
                4,0,0,0,1,2,2,2,1,1,1,1,1,1,3,3,1,
                4,0,0,1,2,2,2,1,1,1,1,1,1,1,1,3,1,
                4,0,0,1,2,1,1,3,3,3,3,3,3,1,1,1,0,
                4,0,1,1,1,1,3,3,3,1,3,1,3,1,2,2,1,
                4,0,1,3,1,1,3,3,3,1,3,1,3,1,2,2,1,
                4,1,3,3,1,1,1,3,3,3,3,3,3,3,1,2,1,
                4,1,3,3,3,1,3,3,1,3,3,3,3,3,1,2,1,
                4,0,1,3,3,3,3,1,1,1,1,3,3,1,1,1,0,
                4,0,0,1,1,3,3,3,3,1,1,1,1,1,2,1,0,
                4,0,0,0,1,1,1,3,3,3,3,3,1,2,2,1,0,
                4,0,0,1,2,2,1,1,1,1,1,1,1,2,1,0,0,
                4,0,1,2,2,2,2,1,1,3,3,3,1,1,0,0,0,
                4,1,1,2,2,2,2,1,3,3,3,3,3,1,0,0,0,
                4,1,1,2,2,2,2,1,3,3,3,3,3,1,0,0,0,
                4,1,1,1,2,2,2,2,1,3,3,3,1,1,1,1,0,
                4,0,1,1,1,2,2,2,1,1,1,1,1,1,1,1,0,
                4,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,1,
                4,0,1,2,2,1,1,1,1,1,1,1,1,2,2,2,1,
                4,1,1,2,1,1,1,1,1,1,1,1,1,2,2,2,1,
                4,1,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,
                4,1,2,2,1,1,1,1,1,0,0,0,1,2,2,1,1,
                4,1,2,2,1,1,0,0,0,0,0,0,0,1,1,1,0,
                4,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,
                4,0,0,0,0,0,1,1,2,2,2,1,1,3,3,3,1,
                4,0,0,0,0,1,2,2,2,2,2,2,1,3,3,3,1,
                4,0,0,0,1,2,2,2,1,1,1,1,1,1,3,3,1,
                4,0,0,1,2,2,2,1,1,1,1,1,1,1,1,3,1,
                4,0,0,1,2,1,1,3,3,3,3,3,3,1,1,1,0,
                4,0,1,1,1,1,3,3,3,1,3,1,3,1,2,2,1,
                4,0,1,3,1,1,3,3,3,1,3,1,3,1,2,2,1,
                4,1,3,3,1,1,1,3,3,3,3,3,3,3,1,2,1,
                4,1,3,3,3,1,3,3,1,3,3,3,3,3,1,2,1,
                4,0,1,3,3,3,3,1,1,1,1,3,3,1,1,1,0,
                4,0,0,1,1,3,3,3,3,1,1,1,1,1,2,1,0,
                4,0,0,0,1,1,1,3,3,3,3,3,1,2,2,1,0,
                4,0,0,1,2,2,1,1,1,1,1,1,1,2,1,0,0,
                4,0,1,2,2,2,2,1,1,3,3,3,1,1,0,0,0,
                4,1,1,2,2,2,2,1,3,3,3,3,3,1,0,0,0,
                4,1,1,2,2,2,2,1,3,3,3,3,3,1,0,0,0,
                4,1,1,1,2,2,2,2,1,3,3,3,1,1,1,1,0,
                4,0,1,1,1,2,2,2,1,1,1,1,1,1,1,1,0,
                4,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,1,
                4,0,1,2,2,1,1,1,1,1,1,1,1,2,2,2,1,
                4,1,1,2,1,1,1,1,1,1,1,1,1,2,2,2,1,
                4,1,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,
                4,1,2,2,1,1,1,1,1,0,0,0,1,2,2,1,1,
                4,1,2,2,1,1,0,0,0,0,0,0,0,1,1,1,0,
                4,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(247, 70, 35);
                    } else if (pixels[i] === 3) {
                        fill(242, 207, 145);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        }
    },
    // Stores values for how to draw link
    link: {
        icon: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,1,1,1,1,1,1,4,0,0,1,2,2,1,2,2,2,1,1,1,4,0,1,2,2,1,3,1,2,1,1,1,1,1,4,1,2,1,2,1,3,1,1,1,1,1,1,1,4,1,1,1,2,1,3,3,1,1,3,3,1,0,1,1,1,4,0,0,1,1,1,3,3,1,3,1,3,1,1,1,2,1,4,0,0,0,1,1,3,3,1,3,1,3,3,3,1,2,1,4,0,0,1,1,1,1,3,3,3,3,3,3,1,1,2,1,4,0,0,0,0,1,1,3,3,3,3,1,1,0,1,2,1,4,0,0,0,1,1,1,1,3,3,3,3,1,0,1,2,1,4,9,9,1,2,2,2,1,3,1,1,1,0,0,1,2,1,4,0,0,1,1,2,2,2,1,1,2,1,0,0,1,2,1,4,0,0,1,1,1,2,2,2,1,2,1,0,1,1,1,1,4,0,1,1,1,1,1,2,2,2,2,1,1,3,3,3,1,4,0,1,1,1,1,2,2,2,2,2,1,3,3,3,3,1,4,1,1,1,1,2,1,1,2,2,1,3,3,3,3,1,1,4,0,1,1,1,1,1,1,1,1,3,3,3,3,1,2,1,4,0,0,1,1,3,3,3,1,3,3,3,1,1,0,1,4,0,0,1,3,3,3,3,1,3,1,1,4,0,0,1,3,3,3,3,1,1,2,1];
                
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 17 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,4,0,0,1,2,2,1,2,2,2,1,1,1,0,0,0,0,0,4,0,1,2,2,1,3,1,2,1,1,1,1,1,0,0,0,0,4,1,2,1,2,1,3,1,1,1,1,1,1,1,0,0,0,0,4,1,1,1,2,1,3,3,1,1,3,3,1,0,1,1,1,0,4,0,0,1,1,1,3,3,1,3,1,3,1,1,1,2,1,0,4,0,0,0,1,1,3,3,1,3,1,3,3,3,1,2,1,0,4,0,0,1,1,1,1,3,3,3,3,3,3,1,1,2,1,0,4,0,0,0,0,1,1,3,3,3,3,1,1,0,1,2,1,0,4,0,0,0,1,1,1,1,3,3,3,3,1,0,1,2,1,0,4,9,9,1,2,2,2,1,3,1,1,1,0,0,1,2,1,0,4,0,0,1,1,2,2,2,1,1,2,1,0,0,1,2,1,0,4,0,0,1,1,1,2,2,2,1,2,1,0,1,1,1,1,0,4,0,1,1,1,1,1,2,2,2,2,1,1,3,3,3,1,0,4,0,1,1,1,1,2,2,2,2,2,1,3,3,3,3,1,0,4,1,1,1,1,2,1,1,2,2,1,3,3,3,3,1,1,0,4,0,1,1,1,1,1,1,1,1,3,3,3,3,1,2,1,0,4,0,0,1,1,3,3,3,1,3,3,3,1,1,0,1,0,0,4,0,0,1,3,3,3,3,1,3,1,1,0,0,0,0,0,0,4,0,0,1,3,3,3,3,1,1,2,1,0,0,0,0,0,0,4,0,0,0,1,3,3,1,1,2,2,2,1,0,0,0,0,0,4,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,4,0,0,0,1,3,3,3,1,1,3,3,1,0,0,0,0,0,4,0,0,0,1,3,3,3,1,3,3,3,3,1,0,0,0,0,4,0,0,0,1,3,3,3,1,1,3,3,3,3,1,0,0,0,4,0,0,0,1,1,3,1,0,0,1,3,1,1,1,0,0,0,4,0,0,1,2,1,1,1,0,0,0,1,1,1,1,0,0,0,4,0,0,1,1,1,1,1,0,0,0,1,2,1,1,1,0,0,4,0,1,2,1,1,1,0,0,0,0,1,1,1,1,1,0,0,4,0,1,1,1,1,0,0,0,0,0,1,2,1,1,1,0,0,4,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,4,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,4,0,0,1,2,2,1,2,2,2,1,1,1,0,0,0,0,0,4,0,1,2,2,1,3,1,2,1,1,1,1,1,0,0,0,0,4,1,2,1,2,1,3,1,1,1,1,1,1,1,0,0,0,0,4,1,1,1,2,1,3,3,1,1,3,3,1,0,1,1,1,0,4,0,0,1,1,1,3,3,1,3,1,3,1,1,1,2,1,0,4,0,0,0,1,1,3,3,1,3,1,3,3,3,1,2,1,0,4,0,0,1,1,1,1,3,3,3,3,3,3,1,1,2,1,0,4,0,0,0,0,1,1,3,3,3,3,1,1,0,1,2,1,0,4,0,0,0,1,1,1,1,3,3,3,3,1,0,1,2,1,0,4,9,9,1,2,2,2,1,3,1,1,1,0,0,1,2,1,0,4,0,0,1,1,2,2,2,1,1,2,1,0,0,1,2,1,0,4,0,0,1,1,1,2,2,2,1,2,1,0,1,1,1,1,0,4,0,1,1,1,1,1,2,2,2,2,1,1,3,3,3,1,0,4,0,1,1,1,1,2,2,2,2,2,1,3,3,3,3,1,0,4,1,1,1,1,2,1,1,2,2,1,3,3,3,3,1,1,0,4,0,1,1,1,1,1,1,1,1,3,3,3,3,1,2,1,0,4,0,0,1,1,3,3,3,1,3,3,3,1,1,0,1,0,0,4,0,0,1,3,3,3,3,1,3,1,1,0,0,0,0,0,0,4,0,0,1,3,3,3,3,1,1,2,1,0,0,0,0,0,0,4,0,0,0,1,3,3,1,1,2,2,2,1,0,0,0,0,0,4,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,4,0,0,0,1,3,3,3,1,1,3,3,1,0,0,0,0,0,4,0,0,0,1,3,3,3,1,3,3,3,3,1,0,0,0,0,4,0,0,0,1,3,3,3,1,1,3,3,3,3,1,0,0,0,4,0,0,0,1,1,3,1,0,0,1,3,1,1,1,0,0,0,4,0,0,1,2,1,1,1,0,0,0,1,1,1,1,0,0,0,4,0,0,1,1,1,1,1,0,0,0,1,2,1,1,1,0,0,4,0,1,2,1,1,1,0,0,0,0,1,1,1,1,1,0,0,4,0,1,1,1,1,0,0,0,0,0,1,2,1,1,1,0,0,4,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,4,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,4,0,0,0,0,1,2,2,1,2,2,2,1,1,1,0,0,4,0,0,0,1,2,2,1,3,1,2,1,1,1,1,1,0,4,0,0,1,2,1,2,1,3,1,1,1,1,1,1,1,0,4,0,0,1,1,1,2,1,3,3,1,1,3,3,1,0,0,4,0,0,0,0,1,1,1,3,3,1,3,1,3,1,1,0,4,0,0,0,0,0,1,1,3,3,1,3,1,3,3,3,1,4,0,0,0,0,1,1,1,1,3,3,3,3,3,3,1,0,4,0,0,0,0,0,1,1,1,3,3,3,3,1,1,0,0,4,0,0,0,1,2,2,2,1,1,3,3,3,3,1,0,0,4,0,0,1,2,1,1,1,2,1,3,1,1,1,0,0,0,4,0,1,2,1,1,1,1,2,2,1,1,0,0,1,1,1,4,0,1,1,1,1,1,1,1,2,1,0,0,0,1,1,1,4,1,2,1,1,1,1,1,2,2,1,0,1,1,3,3,3,4,1,2,1,1,1,1,2,2,1,0,1,3,3,3,3,3,4,1,1,1,1,1,1,1,1,2,1,3,3,3,3,3,1,4,1,1,1,1,3,3,3,3,1,3,3,3,3,1,1,1,4,1,2,1,1,3,3,3,3,1,3,3,3,1,1,2,1,4,1,2,2,1,1,3,3,3,1,3,1,1,1,1,2,1,4,1,1,1,3,1,1,1,1,1,1,1,1,1,1,2,1,4,0,0,0,1,3,3,3,1,1,1,3,3,1,1,2,1,4,0,0,0,1,3,3,3,1,0,1,3,3,3,1,2,1,4,0,0,1,1,1,3,1,0,0,0,1,1,1,1,2,1,4,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,4,1,1,2,1,1,0,0,0,0,1,2,1,1,0,0,0,4,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,4,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        duckRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,4,0,0,0,0,1,2,2,1,2,2,2,1,1,1,0,0,4,0,0,0,1,2,2,1,3,1,2,1,1,1,1,1,0,4,0,0,1,2,1,2,1,3,1,1,1,1,1,1,1,0,4,0,0,1,1,1,2,1,3,3,1,1,3,3,1,0,0,4,0,0,0,0,1,1,1,3,3,1,3,1,3,1,1,0,4,0,0,0,0,0,1,1,3,3,1,3,1,3,3,3,1,4,0,0,0,0,1,1,1,1,3,3,3,3,3,3,1,0,4,0,0,0,0,0,1,1,1,3,3,3,3,1,1,0,0,4,0,0,0,1,2,2,2,1,1,3,3,3,3,1,0,0,4,0,0,1,2,1,1,1,2,1,3,1,1,1,0,0,0,4,0,1,2,1,1,1,1,2,2,1,1,0,0,1,1,1,4,0,1,1,1,1,1,1,1,2,1,0,0,0,1,1,1,4,1,2,1,1,1,1,1,2,2,1,0,1,1,3,3,3,4,1,2,1,1,1,1,2,2,1,0,1,3,3,3,3,3,4,1,1,1,1,1,1,1,1,2,1,3,3,3,3,3,1,4,1,1,1,1,3,3,3,3,1,3,3,3,3,1,1,1,4,1,2,1,1,3,3,3,3,1,3,3,3,1,1,2,1,4,1,2,2,1,1,3,3,3,1,3,1,1,1,1,2,1,4,1,1,1,3,1,1,1,1,1,1,1,1,1,1,2,1,4,0,0,0,1,3,3,3,1,1,1,3,3,1,1,2,1,4,0,0,0,1,3,3,3,1,0,1,3,3,3,1,2,1,4,0,0,1,1,1,3,1,0,0,0,1,1,1,1,2,1,4,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,4,1,1,2,1,1,0,0,0,0,1,2,1,1,0,0,0,4,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,4,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,4,0,0,0,0,1,2,2,1,2,2,2,1,1,1,0,0,4,0,0,0,1,2,2,1,3,1,2,1,1,1,1,1,0,4,0,0,1,2,1,2,1,3,1,1,1,1,1,1,1,0,4,0,0,1,1,1,2,1,3,3,1,1,3,3,1,0,0,4,0,0,0,0,1,1,1,3,3,1,3,1,3,1,1,0,4,0,0,0,0,0,1,1,3,3,1,3,1,3,3,3,1,4,0,0,0,0,1,1,1,1,3,3,3,3,3,3,1,0,4,0,0,0,0,0,1,1,1,3,3,3,3,1,1,0,0,4,0,0,0,1,2,2,2,1,1,3,3,3,3,1,0,0,4,0,0,1,2,1,1,1,2,1,3,1,1,1,0,0,0,4,0,1,2,1,1,1,1,2,2,1,1,0,0,1,1,1,4,0,1,1,1,1,1,1,1,2,1,0,0,0,1,1,1,4,1,2,1,1,1,1,1,2,2,1,0,1,1,3,3,3,4,1,2,1,1,1,1,2,2,1,0,1,3,3,3,3,3,4,1,1,1,1,1,1,1,1,2,1,3,3,3,3,3,1,4,1,1,1,1,3,3,3,3,1,3,3,3,3,1,1,1,4,1,2,1,1,3,3,3,3,1,3,3,3,1,1,2,1,4,1,2,2,1,1,3,3,3,1,3,1,1,1,1,2,1,4,1,1,1,3,1,1,1,1,1,1,1,1,1,1,2,1,4,0,0,0,1,3,3,3,1,1,1,3,3,1,1,2,1,4,0,0,0,1,3,3,3,1,0,1,3,3,3,1,2,1,4,0,0,1,1,1,3,1,0,0,0,1,1,1,1,2,1,4,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,4,1,1,2,1,1,0,0,0,0,1,2,1,1,0,0,0,4,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,4,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,4,0,0,0,0,1,2,2,1,2,2,2,1,1,1,0,0,4,0,0,0,1,2,2,1,3,1,2,1,1,1,1,1,0,4,0,0,1,2,1,2,1,3,1,1,1,1,1,1,1,0,4,0,0,1,1,1,2,1,3,3,1,1,3,3,1,0,0,4,0,0,0,0,1,1,1,3,3,1,3,1,3,1,1,0,4,0,0,0,0,0,1,1,3,3,1,3,1,3,3,3,1,4,0,0,0,0,1,1,1,1,3,3,3,3,3,3,1,0,4,0,0,0,0,0,1,1,1,3,3,3,3,1,1,0,0,4,0,0,0,1,2,2,2,1,1,3,3,3,3,1,0,0,4,0,0,1,2,1,1,1,2,1,3,1,1,1,0,0,0,4,0,1,2,1,1,1,1,2,2,1,1,0,0,1,1,1,4,0,1,1,1,1,1,1,1,2,1,0,0,0,1,1,1,4,1,2,1,1,1,1,1,2,2,1,0,1,1,3,3,3,4,1,2,1,1,1,1,2,2,1,0,1,3,3,3,3,3,4,1,1,1,1,1,1,1,1,2,1,3,3,3,3,3,1,4,1,1,1,1,3,3,3,3,1,3,3,3,3,1,1,1,4,1,2,1,1,3,3,3,3,1,3,3,3,1,1,2,1,4,1,2,2,1,1,3,3,3,1,3,1,1,1,1,2,1,4,1,1,1,3,1,1,1,1,1,1,1,1,1,1,2,1,4,0,0,0,1,3,3,3,1,1,1,3,3,1,1,2,1,4,0,0,0,1,3,3,3,1,0,1,3,3,3,1,2,1,4,0,0,1,1,1,3,1,0,0,0,1,1,1,1,2,1,4,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,4,1,1,2,1,1,0,0,0,0,1,2,1,1,0,0,0,4,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,4,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(170, 125, 25);
                    } else if (pixels[i] === 2) {
                        fill(97, 232, 100);
                    } else if (pixels[i] === 3) {
                        fill(247, 222, 180);
                    } else if (pixels[i] === 4) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        }
    },
    // Stores values for how to draw kirby
    kirby: {
        icon: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,3,3,3,3,3,6,0,0,0,0,3,3,2,1,1,1,2,3,3,6,0,0,0,3,2,1,1,1,1,1,1,1,2,3,6,0,0,3,2,1,1,1,1,1,1,1,1,1,3,6,0,0,3,1,1,1,1,1,1,1,1,1,1,2,3,6,0,3,1,1,1,1,1,1,1,3,1,3,1,2,3,6,3,2,1,1,1,1,1,1,1,3,1,3,1,1,1,3,6,3,1,1,1,1,1,1,1,1,3,1,3,1,1,1,3,6,3,1,1,1,1,1,2,2,1,1,1,1,2,2,1,3,6,3,2,1,1,2,1,1,1,1,1,1,1,1,2,1,3,6,0,3,2,1,3,1,1,1,1,1,3,1,1,3,2,3,6,0,0,3,3,2,1,1,1,1,1,1,1,2,3,3,6,0,0,0,3,3,2,2,1,1,1,1,2,3,3,6,0,0,3,2,2,3,3,3,3,3,3,3,2,2,3,6,0,3,2,2,2,2,2,3,3,3,3,2,2,2,2,3,6,0,0,3,3,3,3,3,0,0,0,0,3,3,3,3];
                
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,6,0,0,0,0,3,3,2,1,1,1,2,3,3,0,0,0,6,0,0,0,3,2,1,1,1,1,1,1,1,2,3,0,0,6,0,0,3,2,1,1,1,1,1,1,1,1,1,3,0,0,6,0,0,3,1,1,1,1,1,1,1,1,1,1,2,3,0,6,0,3,1,1,1,1,1,1,1,3,1,3,1,2,3,0,6,3,2,1,1,1,1,1,1,1,3,1,3,1,1,1,3,6,3,1,1,1,1,1,1,1,1,3,1,3,1,1,1,3,6,3,1,1,1,1,1,2,2,1,1,1,1,2,2,1,3,6,3,2,1,1,2,1,1,1,1,1,1,1,1,2,1,3,6,0,3,2,1,3,1,1,1,1,1,3,1,1,3,2,3,6,0,0,3,3,2,1,1,1,1,1,1,1,2,3,3,0,6,0,0,0,3,3,2,2,1,1,1,1,2,3,3,0,0,6,0,0,3,2,2,3,3,3,3,3,3,3,2,2,3,0,6,0,3,2,2,2,2,2,3,3,3,3,2,2,2,2,3,6,0,0,3,3,3,3,3,0,0,0,0,3,3,3,3];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,6,0,0,0,0,3,3,2,1,1,1,2,3,3,0,0,0,6,0,0,0,3,2,1,1,1,1,1,1,1,2,3,0,0,6,0,0,3,2,1,1,1,1,1,1,1,1,1,3,0,0,6,0,0,3,1,1,1,1,1,1,1,1,1,1,2,3,0,6,0,3,1,1,1,1,1,1,1,3,1,3,1,2,3,0,6,3,2,1,1,1,1,1,1,1,3,1,3,1,1,1,3,6,3,1,1,1,1,1,1,1,1,3,1,3,1,1,1,3,6,3,1,1,1,1,1,2,2,1,1,1,1,2,2,1,3,6,3,2,1,1,2,1,1,1,1,1,1,1,1,2,1,3,6,0,3,2,1,3,1,1,1,1,1,3,1,1,3,2,3,6,0,0,3,3,2,1,1,1,1,1,1,1,2,3,3,0,6,0,0,0,3,3,2,2,1,1,1,1,2,3,3,0,0,6,0,0,3,2,2,3,3,3,3,3,3,3,2,2,3,0,6,0,3,2,2,2,2,2,3,3,3,3,2,2,2,2,3,6,0,0,3,3,3,3,3,0,0,0,0,3,3,3,3];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,6,3,1,2,2,1,1,1,1,2,2,1,1,1,1,1,3,6,3,1,2,1,1,3,1,3,1,1,1,2,1,1,2,3,6,3,2,3,1,1,3,1,3,1,1,1,3,1,2,3,0,6,0,3,3,2,1,1,1,1,1,1,1,2,3,3,0,0,6,0,0,3,3,2,1,1,1,1,2,2,3,3,0,0,0,6,0,3,2,2,3,3,3,3,3,3,3,2,2,3,0,0,6,0,0,3,3,3,0,0,0,0,0,3,3,3,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckRight: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,6,3,1,2,2,1,1,1,1,2,2,1,1,1,1,1,3,6,3,1,2,1,1,3,1,3,1,1,1,2,1,1,2,3,6,3,2,3,1,1,3,1,3,1,1,1,3,1,2,3,0,6,0,3,3,2,1,1,1,1,1,1,1,2,3,3,0,0,6,0,0,3,3,2,1,1,1,1,2,2,3,3,0,0,0,6,0,3,2,2,3,3,3,3,3,3,3,2,2,3,0,0,6,0,0,3,3,3,0,0,0,0,0,3,3,3,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,3,3,3,0,3,3,3,3,3,3,0,3,3,0,
                6,0,0,3,2,1,2,3,2,1,1,1,1,2,3,2,2,3,
                6,0,3,2,1,1,1,2,1,1,1,1,1,1,2,3,1,3,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,2,1,3,
                6,0,3,2,1,1,1,1,1,1,1,3,1,3,1,1,1,3,
                6,0,0,3,2,1,1,1,1,1,1,3,1,3,1,1,2,3,
                6,0,0,3,3,2,1,1,1,1,1,3,1,3,1,1,3,0,
                6,0,0,3,2,1,1,1,2,2,1,1,1,1,1,2,3,0,
                6,0,0,3,2,1,1,1,1,1,1,1,1,1,1,1,3,0,
                6,0,0,0,3,1,1,1,1,1,1,1,3,1,1,2,3,0,
                6,0,0,0,3,2,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,0,3,2,3,2,1,1,1,1,1,1,1,2,3,0,0,
                6,0,0,3,2,2,3,3,2,1,1,1,2,2,3,0,0,0,
                6,0,0,3,2,2,2,3,3,3,3,3,3,3,0,0,0,0,
                6,0,0,3,2,2,3,0,3,2,2,3,0,0,0,0,0,0,
                6,0,0,0,3,3,0,0,0,3,3,0,0,0,0,0,0,];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,3,3,3,0,3,3,3,3,3,3,0,3,3,0,
                6,0,0,3,2,1,2,3,2,1,1,1,1,2,3,2,2,3,
                6,0,3,2,1,1,1,2,1,1,1,1,1,1,2,3,1,3,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,2,1,3,
                6,0,3,2,1,1,1,1,1,1,1,3,1,3,1,1,1,3,
                6,0,0,3,2,1,1,1,1,1,1,3,1,3,1,1,2,3,
                6,0,0,3,3,2,1,1,1,1,1,3,1,3,1,1,3,0,
                6,0,0,3,2,1,1,1,2,2,1,1,1,1,1,2,3,0,
                6,0,0,3,2,1,1,1,1,1,1,1,1,1,1,1,3,0,
                6,0,0,0,3,1,1,1,1,1,1,1,3,1,1,2,3,0,
                6,0,0,0,3,2,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,0,3,2,3,2,1,1,1,1,1,1,1,2,3,0,0,
                6,0,0,3,2,2,3,3,2,1,1,1,2,2,3,0,0,0,
                6,0,0,3,2,2,2,3,3,3,3,3,3,3,0,0,0,0,
                6,0,0,3,2,2,3,0,3,2,2,3,0,0,0,0,0,0,
                6,0,0,0,3,3,0,0,0,3,3,0,0,0,0,0,0,];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        suckLeft: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,
                6,0,0,0,0,0,0,3,3,2,1,1,2,3,3,0,0,0,
                6,0,0,0,3,3,3,2,1,1,1,1,1,1,2,3,0,0,
                6,0,0,3,2,1,1,3,1,1,1,1,1,3,1,2,3,0,
                6,0,3,2,1,1,1,2,1,1,1,1,1,1,3,1,3,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,3,1,2,3,
                6,0,3,1,1,1,1,1,1,1,1,2,2,1,1,1,1,3,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,
                6,0,3,2,1,1,1,1,1,1,1,1,2,3,1,2,3,0,
                6,0,0,3,2,1,1,1,1,1,1,1,1,1,3,3,0,0,
                6,0,3,2,1,1,1,1,1,1,1,1,1,1,2,3,0,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,3,2,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,0,3,1,1,1,1,1,1,1,1,1,1,2,3,3,0,
                6,0,0,3,2,1,1,1,1,1,1,1,1,2,3,1,1,3,
                6,0,0,0,3,2,1,1,1,1,1,1,1,1,1,1,2,3,
                6,0,0,0,3,3,3,2,2,1,1,1,1,1,2,2,3,3,
                6,0,0,0,3,2,2,3,3,3,3,3,3,3,3,3,0,0,
                6,0,0,0,0,3,2,2,2,2,2,2,2,3,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0
                ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        suckRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,
                6,0,0,0,0,0,0,3,3,2,1,1,2,3,3,0,0,0,
                6,0,0,0,3,3,3,2,1,1,1,1,1,1,2,3,0,0,
                6,0,0,3,2,1,1,3,1,1,1,1,1,3,1,2,3,0,
                6,0,3,2,1,1,1,2,1,1,1,1,1,1,3,1,3,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,3,1,2,3,
                6,0,3,1,1,1,1,1,1,1,1,2,2,1,1,1,1,3,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,
                6,0,3,2,1,1,1,1,1,1,1,1,2,3,1,2,3,0,
                6,0,0,3,2,1,1,1,1,1,1,1,1,1,3,3,0,0,
                6,0,3,2,1,1,1,1,1,1,1,1,1,1,2,3,0,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,3,2,1,1,1,1,1,1,1,1,1,1,1,3,0,0,
                6,0,0,3,1,1,1,1,1,1,1,1,1,1,2,3,3,0,
                6,0,0,3,2,1,1,1,1,1,1,1,1,2,3,1,1,3,
                6,0,0,0,3,2,1,1,1,1,1,1,1,1,1,1,2,3,
                6,0,0,0,3,3,3,2,2,1,1,1,1,1,2,2,3,3,
                6,0,0,0,3,2,2,3,3,3,3,3,3,3,3,3,0,0,
                6,0,0,0,0,3,2,2,2,2,2,2,2,3,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0
                ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(245, 188, 245);
                    } else if (pixels[i] === 2) {
                        fill(255, 122, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        }
    },
    // Stores values for how to draw samus
    samus: {
        icon: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,
                5,0,0,0,0,3,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,
                5,0,0,0,3,2,3,3,3,4,3,3,4,2,0,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,3,4,3,1,4,2,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,4,3,3,1,4,4,0,0,0,0,0,0,
                5,0,0,0,0,3,2,2,2,2,1,3,3,1,4,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,4,2,1,3,3,3,0,0,0,0,0,0,
                5,0,0,0,2,2,2,2,4,2,4,2,3,2,2,2,4,4,2,4,0,
                5,0,0,0,2,2,2,4,2,2,2,2,2,2,2,2,4,4,4,4,4,
                5,0,0,0,2,2,2,1,2,2,2,3,3,2,2,4,4,4,4,4,4,
                5,0,0,0,2,2,2,2,4,3,2,2,3,3,0,4,4,4,2,4,0,
                5,0,0,0,0,2,2,2,4,3,3,3,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,3,3,2,3,3,3,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,4,4,2,2,3,3,3,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,2,0,0,3,3,0,3,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0];
                
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 20 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,
                5,0,0,0,0,3,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,
                5,0,0,0,3,2,3,3,3,4,3,3,4,2,0,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,3,4,3,1,4,2,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,4,3,3,1,4,4,0,0,0,0,0,0,
                5,0,0,0,0,3,2,2,2,2,1,3,3,1,4,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,4,2,1,3,3,3,0,0,0,0,0,0,
                5,0,0,0,2,2,2,2,4,2,4,2,3,2,2,2,4,4,2,4,0,
                5,0,0,0,2,2,2,4,2,2,2,2,2,2,2,2,4,4,4,4,4,
                5,0,0,0,2,2,2,1,2,2,2,3,3,2,2,4,4,4,4,4,4,
                5,0,0,0,2,2,2,2,4,3,2,2,3,3,0,4,4,4,2,4,0,
                5,0,0,0,0,2,2,2,4,3,3,3,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,3,3,2,3,3,3,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,4,4,2,2,3,3,3,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,2,0,0,3,3,0,3,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,0,0,2,3,3,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,0,0,2,2,3,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,3,3,2,2,2,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,3,3,3,2,2,0,0,0,0,0,0,0,0,0,
                5,0,0,0,2,2,2,2,3,2,2,2,0,0,0,0,0,0,0,0,0,
                5,0,3,2,2,2,2,0,0,2,2,3,0,0,0,0,0,0,0,0,0,
                5,3,3,2,3,3,0,0,3,2,3,3,0,0,0,0,0,0,0,0,0,
                5,3,3,3,3,0,0,0,3,3,3,4,3,0,0,0,0,0,0,0,0,
                5,3,3,4,4,0,0,0,3,3,4,3,3,3,0,0,0,0,0,0,0,
                5,0,4,3,3,3,0,0,0,3,4,3,3,3,3,0,0,0,0,0,0,
                5,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,
                5,0,0,0,0,3,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,
                5,0,0,0,3,2,3,3,3,4,3,3,4,2,0,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,3,4,3,1,4,2,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,4,3,3,1,4,4,0,0,0,0,0,0,
                5,0,0,0,0,3,2,2,2,2,1,3,3,1,4,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,4,2,1,3,3,3,0,0,0,0,0,0,
                5,0,0,0,2,2,2,2,4,2,4,2,3,2,2,2,4,4,2,4,0,
                5,0,0,0,2,2,2,4,2,2,2,2,2,2,2,2,4,4,4,4,4,
                5,0,0,0,2,2,2,1,2,2,2,3,3,2,2,4,4,4,4,4,4,
                5,0,0,0,2,2,2,2,4,3,2,2,3,3,0,4,4,4,2,4,0,
                5,0,0,0,0,2,2,2,4,3,3,3,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,3,3,2,3,3,3,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,4,4,2,2,3,3,3,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,2,0,0,3,3,0,3,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,0,0,2,3,3,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,2,0,0,2,2,3,0,0,0,0,0,0,0,
                5,0,0,0,0,0,2,2,3,3,2,2,2,0,0,0,0,0,0,0,0,
                5,0,0,0,0,2,2,3,3,3,2,2,0,0,0,0,0,0,0,0,0,
                5,0,0,0,2,2,2,2,3,2,2,2,0,0,0,0,0,0,0,0,0,
                5,0,3,2,2,2,2,0,0,2,2,3,0,0,0,0,0,0,0,0,0,
                5,3,3,2,3,3,0,0,3,2,3,3,0,0,0,0,0,0,0,0,0,
                5,3,3,3,3,0,0,0,3,3,3,4,3,0,0,0,0,0,0,0,0,
                5,3,3,4,4,0,0,0,3,3,4,3,3,3,0,0,0,0,0,0,0,
                5,0,4,3,3,3,0,0,0,3,4,3,3,3,3,0,0,0,0,0,0,
                5,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
                x-= 14 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,3,3,3,0,0,0,0,
                5,0,0,0,0,0,3,3,3,3,3,2,3,0,0,
                5,0,0,0,0,0,3,3,3,3,3,3,2,3,0,
                5,0,0,0,0,3,3,3,3,3,3,3,3,3,0,
                5,0,0,0,0,2,2,2,2,2,3,4,3,3,3,
                5,0,0,0,2,2,2,2,4,4,2,4,3,3,3,
                5,0,0,2,2,2,2,4,2,2,2,3,3,4,3,
                5,0,0,2,2,2,2,4,2,2,2,2,3,4,4,
                5,0,2,2,2,2,2,2,2,2,2,2,2,2,4,
                5,0,2,2,2,2,2,0,0,2,2,2,2,2,2,
                5,0,2,2,2,2,2,2,4,0,2,2,2,2,3,
                5,2,2,2,2,2,2,2,4,4,0,2,2,3,3,
                5,2,2,2,2,2,2,4,2,2,2,3,3,0,0,
                5,2,2,2,2,4,2,2,2,2,3,2,3,3,0,
                5,2,2,2,2,2,2,2,2,4,2,2,2,3,0,
                5,2,2,2,2,2,2,4,2,2,2,2,2,2,0,
                5,2,2,2,2,2,4,2,2,2,2,2,2,0,0,
                5,0,2,2,2,4,2,2,2,2,2,0,0,0,0,
                5,0,0,2,2,3,2,2,2,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,0,0,0,0,0,0,
                5,0,0,3,3,3,3,4,0,0,0,0,0,0,0,
                5,0,0,3,3,3,4,3,3,3,0,0,0,0,0,
                5,0,0,0,3,4,3,3,3,3,3,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        duckRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,3,3,3,0,0,0,0,
                5,0,0,0,0,0,3,3,3,3,3,2,3,0,0,
                5,0,0,0,0,0,3,3,3,3,3,3,2,3,0,
                5,0,0,0,0,3,3,3,3,3,3,3,3,3,0,
                5,0,0,0,0,2,2,2,2,2,3,4,3,3,3,
                5,0,0,0,2,2,2,2,4,4,2,4,3,3,3,
                5,0,0,2,2,2,2,4,2,2,2,3,3,4,3,
                5,0,0,2,2,2,2,4,2,2,2,2,3,4,4,
                5,0,2,2,2,2,2,2,2,2,2,2,2,2,4,
                5,0,2,2,2,2,2,0,0,2,2,2,2,2,2,
                5,0,2,2,2,2,2,2,4,0,2,2,2,2,3,
                5,2,2,2,2,2,2,2,4,4,0,2,2,3,3,
                5,2,2,2,2,2,2,4,2,2,2,3,3,0,0,
                5,2,2,2,2,4,2,2,2,2,3,2,3,3,0,
                5,2,2,2,2,2,2,2,2,4,2,2,2,3,0,
                5,2,2,2,2,2,2,4,2,2,2,2,2,2,0,
                5,2,2,2,2,2,4,2,2,2,2,2,2,0,0,
                5,0,2,2,2,4,2,2,2,2,2,0,0,0,0,
                5,0,0,2,2,3,2,2,2,0,0,0,0,0,0,
                5,0,0,0,3,3,3,3,3,0,0,0,0,0,0,
                5,0,0,3,3,3,3,4,0,0,0,0,0,0,0,
                5,0,0,3,3,3,4,3,3,3,0,0,0,0,0,
                5,0,0,0,3,4,3,3,3,3,3,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                x-= 18 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,
                5,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,0,0,
                5,0,0,0,0,0,0,0,0,3,2,3,3,3,3,3,3,3,0,
                5,0,0,0,0,0,0,0,3,2,3,3,3,4,3,3,4,2,0,
                5,0,0,0,0,0,0,0,3,3,3,3,3,3,4,3,1,4,2,
                5,0,0,0,0,0,0,0,3,3,1,1,3,4,3,3,1,4,4,
                5,0,0,0,0,0,0,0,0,3,2,2,2,1,3,3,3,1,4,
                5,0,0,0,0,0,0,0,0,4,2,4,2,2,1,3,3,3,3,
                5,0,0,0,0,0,0,0,0,2,2,2,4,2,4,3,3,3,0,
                5,0,0,0,0,0,0,0,2,2,2,2,2,4,3,4,3,0,0,
                5,0,0,0,0,0,0,2,2,2,1,1,1,2,2,0,0,0,0,
                5,0,0,0,0,0,0,3,3,2,2,2,2,3,3,3,4,0,0,
                5,0,0,0,0,0,0,3,2,2,2,2,3,3,4,4,4,4,0,
                5,0,0,0,0,0,0,0,2,2,2,2,3,1,1,1,1,4,0,
                5,0,0,0,0,0,0,0,0,2,2,2,2,3,3,4,4,0,0,
                5,0,0,0,0,3,3,0,2,2,2,2,2,2,2,2,2,3,0,
                5,0,0,3,4,3,3,0,2,2,2,2,2,2,2,2,3,2,2,
                5,0,3,3,3,4,3,3,0,2,2,2,2,2,2,0,2,2,2,
                5,3,3,3,3,4,3,2,0,2,2,2,0,0,0,2,2,2,0,
                5,3,3,0,0,3,3,2,2,3,2,2,0,3,2,2,3,0,0,
                5,0,0,0,0,0,3,2,2,3,2,0,3,3,3,3,3,0,0,
                5,0,0,0,0,0,0,0,2,2,2,0,3,3,4,4,0,0,0,
                5,0,0,0,0,0,0,0,3,3,0,0,3,4,3,3,3,0,0,
                5,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,
                5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,5];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,
                5,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,0,0,
                5,0,0,0,0,0,0,0,0,3,2,3,3,3,3,3,3,3,0,
                5,0,0,0,0,0,0,0,3,2,3,3,3,4,3,3,4,2,0,
                5,0,0,0,0,0,0,0,3,3,3,3,3,3,4,3,1,4,2,
                5,0,0,0,0,0,0,0,3,3,1,1,3,4,3,3,1,4,4,
                5,0,0,0,0,0,0,0,0,3,2,2,2,1,3,3,3,1,4,
                5,0,0,0,0,0,0,0,0,4,2,4,2,2,1,3,3,3,3,
                5,0,0,0,0,0,0,0,0,2,2,2,4,2,4,3,3,3,0,
                5,0,0,0,0,0,0,0,2,2,2,2,2,4,3,4,3,0,0,
                5,0,0,0,0,0,0,2,2,2,1,1,1,2,2,0,0,0,0,
                5,0,0,0,0,0,0,3,3,2,2,2,2,3,3,3,4,0,0,
                5,0,0,0,0,0,0,3,2,2,2,2,3,3,4,4,4,4,0,
                5,0,0,0,0,0,0,0,2,2,2,2,3,1,1,1,1,4,0,
                5,0,0,0,0,0,0,0,0,2,2,2,2,3,3,4,4,0,0,
                5,0,0,0,0,3,3,0,2,2,2,2,2,2,2,2,2,3,0,
                5,0,0,3,4,3,3,0,2,2,2,2,2,2,2,2,3,2,2,
                5,0,3,3,3,4,3,3,0,2,2,2,2,2,2,0,2,2,2,
                5,3,3,3,3,4,3,2,0,2,2,2,0,0,0,2,2,2,0,
                5,3,3,0,0,3,3,2,2,3,2,2,0,3,2,2,3,0,0,
                5,0,0,0,0,0,3,2,2,3,2,0,3,3,3,3,3,0,0,
                5,0,0,0,0,0,0,0,2,2,2,0,3,3,4,4,0,0,0,
                5,0,0,0,0,0,0,0,3,3,0,0,3,4,3,3,3,0,0,
                5,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,
                5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,5];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(250, 152, 68);
                    } else if (pixels[i] === 3) {
                        fill(214, 42, 22);
                    } else if (pixels[i] === 4) {
                        fill(19, 147, 22);
                    } else if (pixels[i] === 5) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        }
    },
    // Stores values for how to draw megaman
    megaman: {
        icon: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,0,0,0,0,1,1,1,6,0,0,0,0,0,0,0,0,1,1,1,4,4,1,6,0,0,0,0,0,0,0,1,5,5,5,1,4,4,1,6,0,0,0,0,0,0,1,5,5,5,5,5,1,1,1,1,6,0,0,0,0,0,0,1,5,5,5,5,5,1,4,4,5,1,6,0,0,0,0,0,1,4,5,5,5,5,5,5,1,1,5,1,6,0,0,0,0,0,1,4,5,5,3,2,2,2,5,5,2,1,6,0,0,0,0,0,1,4,5,3,2,2,1,1,3,1,2,1,6,0,0,0,0,0,0,1,5,3,2,2,1,1,3,1,2,1,6,0,0,0,0,0,1,1,5,3,3,2,2,2,3,3,3,1,6,0,0,0,1,1,4,4,1,2,3,1,1,1,1,3,1,1,1,6,0,0,1,5,4,4,4,4,1,3,3,3,3,3,1,4,4,5,1,6,0,0,1,5,5,4,4,4,4,1,1,1,1,1,4,4,5,5,1,6,0,1,5,5,5,4,1,4,4,4,4,4,4,4,1,4,5,5,5,1,6,0,1,5,5,1,1,1,4,4,4,4,4,4,4,1,1,1,5,5,1,6,0,1,5,5,5,1,1,4,4,4,4,4,4,4,1,1,5,5,5,1,6,0,1,5,5,5,1,1,5,5,5,5,5,5,5,1,1,5,5,5,1,6,0,0,1,1,1,0,1,5,5,5,5,5,5,5,1,0,1,1,1,6,0,0,0,0,0,1,4,4,5,5,5,5,4,4,4,1,6,0,0,0,0,1,5,5,4,4,4,1,4,4,4,4,5,1];
                
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(240, 220, 185);
                    } else if (pixels[i] === 4) {
                        fill(160, 200, 230);
                    } else if (pixels[i] === 5) {
                        fill(50, 115, 225);
                    } else if (pixels[i] === 6) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 22 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,1,1,4,4,1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,5,5,5,1,4,4,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,5,1,1,1,1,0,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,5,1,4,4,5,1,0,0,0,0,0,6,0,0,0,0,0,1,4,5,5,5,5,5,5,1,1,5,1,0,0,0,0,0,6,0,0,0,0,0,1,4,5,5,3,2,2,2,5,5,2,1,0,0,0,0,0,6,0,0,0,0,0,1,4,5,3,2,2,1,1,3,1,2,1,0,0,0,0,0,6,0,0,0,0,0,0,1,5,3,2,2,1,1,3,1,2,1,0,0,0,0,0,6,0,0,0,0,0,1,1,5,3,3,2,2,2,3,3,3,1,0,0,0,0,0,6,0,0,0,1,1,4,4,1,2,3,1,1,1,1,3,1,1,1,0,0,0,0,6,0,0,1,5,4,4,4,4,1,3,3,3,3,3,1,4,4,5,1,0,0,0,6,0,0,1,5,5,4,4,4,4,1,1,1,1,1,4,4,5,5,1,0,0,0,6,0,1,5,5,5,4,1,4,4,4,4,4,4,4,1,4,5,5,5,1,0,0,6,0,1,5,5,1,1,1,4,4,4,4,4,4,4,1,1,1,5,5,1,0,0,6,0,1,5,5,5,1,1,4,4,4,4,4,4,4,1,1,5,5,5,1,0,0,6,0,1,5,5,5,1,1,5,5,5,5,5,5,5,1,1,5,5,5,1,0,0,6,0,0,1,1,1,0,1,5,5,5,5,5,5,5,1,0,1,1,1,0,0,0,6,0,0,0,0,0,1,4,4,5,5,5,5,4,4,4,1,0,0,0,0,0,0,6,0,0,0,0,1,5,5,4,4,4,1,4,4,4,4,5,1,0,0,0,0,0,6,0,0,0,1,1,5,5,5,4,1,0,1,4,5,5,5,1,1,0,0,0,0,6,0,1,1,5,5,5,5,5,1,0,0,0,1,5,5,5,5,5,1,1,0,0,6,1,5,5,5,5,5,5,5,1,0,0,0,1,5,5,5,5,5,5,5,1,0,6,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(240, 220, 185);
                    } else if (pixels[i] === 4) {
                        fill(160, 200, 230);
                    } else if (pixels[i] === 5) {
                        fill(50, 115, 225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,1,1,4,4,1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,5,5,5,1,4,4,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,5,1,1,1,1,0,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,5,1,4,4,5,1,0,0,0,0,0,6,0,0,0,0,0,1,4,5,5,5,5,5,5,1,1,5,1,0,0,0,0,0,6,0,0,0,0,0,1,4,5,5,3,2,2,2,5,5,2,1,0,0,0,0,0,6,0,0,0,0,0,1,4,5,3,2,2,1,1,3,1,2,1,0,0,0,0,0,6,0,0,0,0,0,0,1,5,3,2,2,1,1,3,1,2,1,0,0,0,0,0,6,0,0,0,0,0,1,1,5,3,3,2,2,2,3,3,3,1,0,0,0,0,0,6,0,0,0,1,1,4,4,1,2,3,1,1,1,1,3,1,1,1,0,0,0,0,6,0,0,1,5,4,4,4,4,1,3,3,3,3,3,1,4,4,5,1,0,0,0,6,0,0,1,5,5,4,4,4,4,1,1,1,1,1,4,4,5,5,1,0,0,0,6,0,1,5,5,5,4,1,4,4,4,4,4,4,4,1,4,5,5,5,1,0,0,6,0,1,5,5,1,1,1,4,4,4,4,4,4,4,1,1,1,5,5,1,0,0,6,0,1,5,5,5,1,1,4,4,4,4,4,4,4,1,1,5,5,5,1,0,0,6,0,1,5,5,5,1,1,5,5,5,5,5,5,5,1,1,5,5,5,1,0,0,6,0,0,1,1,1,0,1,5,5,5,5,5,5,5,1,0,1,1,1,0,0,0,6,0,0,0,0,0,1,4,4,5,5,5,5,4,4,4,1,0,0,0,0,0,0,6,0,0,0,0,1,5,5,4,4,4,1,4,4,4,4,5,1,0,0,0,0,0,6,0,0,0,1,1,5,5,5,4,1,0,1,4,5,5,5,1,1,0,0,0,0,6,0,1,1,5,5,5,5,5,1,0,0,0,1,5,5,5,5,5,1,1,0,0,6,1,5,5,5,5,5,5,5,1,0,0,0,1,5,5,5,5,5,5,5,1,0,6,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(240, 220, 185);
                    } else if (pixels[i] === 4) {
                        fill(160, 200, 230);
                    } else if (pixels[i] === 5) {
                        fill(50, 115, 225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
                x-= 21 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,1,1,4,4,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,5,5,5,1,4,4,1,0,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,1,4,4,5,1,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,5,1,4,4,5,1,0,0,0,0,6,0,0,0,0,0,1,4,5,5,5,5,5,1,1,1,5,1,0,0,0,0,6,0,0,0,0,1,1,4,5,5,1,1,1,1,4,4,5,1,1,0,0,0,6,0,0,0,1,4,1,4,5,1,3,2,2,1,1,1,1,1,4,1,0,0,6,0,0,1,5,4,4,1,1,3,2,2,2,2,1,1,2,1,4,1,0,0,6,0,0,1,5,4,4,4,1,1,3,2,1,1,3,1,2,1,4,5,1,0,6,0,1,5,5,4,4,4,4,1,1,3,3,3,3,3,1,4,5,5,1,0,6,0,1,5,5,1,1,1,4,4,4,1,1,1,1,1,1,1,5,5,1,0,6,0,1,5,5,5,1,1,5,4,4,4,4,4,5,1,1,5,5,5,1,0,6,0,0,1,1,1,1,4,5,5,5,5,5,5,5,4,1,1,1,1,0,0,6,0,1,5,5,5,5,4,4,5,5,5,5,5,4,4,5,5,5,5,1,0,6,1,5,5,5,5,5,5,4,4,1,1,1,4,4,5,5,5,5,5,5,1,6,0,1,1,5,5,5,5,5,1,0,0,0,1,5,5,5,5,5,1,1,0,6,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(240, 220, 185);
                    } else if (pixels[i] === 4) {
                        fill(160, 200, 230);
                    } else if (pixels[i] === 5) {
                        fill(50, 115, 225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        duckRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,1,1,4,4,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,5,5,5,1,4,4,1,0,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,1,4,4,5,1,0,0,0,0,0,6,0,0,0,0,0,0,1,5,5,5,5,5,1,4,4,5,1,0,0,0,0,6,0,0,0,0,0,1,4,5,5,5,5,5,1,1,1,5,1,0,0,0,0,6,0,0,0,0,1,1,4,5,5,1,1,1,1,4,4,5,1,1,0,0,0,6,0,0,0,1,4,1,4,5,1,3,2,2,1,1,1,1,1,4,1,0,0,6,0,0,1,5,4,4,1,1,3,2,2,2,2,1,1,2,1,4,1,0,0,6,0,0,1,5,4,4,4,1,1,3,2,1,1,3,1,2,1,4,5,1,0,6,0,1,5,5,4,4,4,4,1,1,3,3,3,3,3,1,4,5,5,1,0,6,0,1,5,5,1,1,1,4,4,4,1,1,1,1,1,1,1,5,5,1,0,6,0,1,5,5,5,1,1,5,4,4,4,4,4,5,1,1,5,5,5,1,0,6,0,0,1,1,1,1,4,5,5,5,5,5,5,5,4,1,1,1,1,0,0,6,0,1,5,5,5,5,4,4,5,5,5,5,5,4,4,5,5,5,5,1,0,6,1,5,5,5,5,5,5,4,4,1,1,1,4,4,5,5,5,5,5,5,1,6,0,1,1,5,5,5,5,5,1,0,0,0,1,5,5,5,5,5,1,1,0,6,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(240, 220, 185);
                    } else if (pixels[i] === 4) {
                        fill(160, 200, 230);
                    } else if (pixels[i] === 5) {
                        fill(50, 115, 225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                x-= 26 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,3,3,0,0,0,0,0,0,3,3,3,4,4,3,0,0,0,0,0,0,3,3,0,0,
                6,0,3,5,5,3,0,0,0,0,3,5,5,5,3,4,4,3,0,0,0,0,3,5,5,3,0,
                6,3,5,5,5,5,3,0,0,3,5,5,5,5,5,3,3,3,3,0,0,3,5,5,5,5,3,
                6,3,5,5,5,3,3,0,0,3,5,5,5,5,5,3,4,4,5,3,0,3,3,5,5,5,3,
                6,0,3,5,5,3,5,3,3,4,5,5,5,5,5,5,3,3,5,3,3,5,3,5,5,3,0,
                6,0,0,3,5,5,5,5,3,4,5,5,1,2,2,2,5,5,2,3,5,5,5,5,3,0,0,
                6,0,0,0,3,5,5,5,3,4,5,1,2,2,3,3,1,3,2,3,4,5,5,3,0,0,0,
                6,0,0,0,0,3,5,5,4,3,5,1,2,2,3,3,1,3,2,3,4,4,3,0,0,0,0,
                6,0,0,0,0,0,3,4,4,3,5,1,1,2,2,2,1,2,1,3,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,3,4,4,3,5,1,1,3,3,3,1,3,4,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,3,4,4,3,1,3,3,3,3,3,4,3,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,3,4,4,4,3,1,3,3,3,4,4,3,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,3,3,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,5,4,4,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,4,4,4,5,5,3,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,5,5,5,5,4,4,4,5,5,5,3,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,3,3,3,3,5,5,5,5,3,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,3,0,0,0,0,3,5,5,5,5,3,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,5,3,0,0,0,0,3,5,5,5,5,5,3,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,3,3,5,5,5,5,3,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,5,3,0,0,0,0,0,3,3,3,3,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 4) {
                        fill(160,200,230);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,3,3,0,0,0,0,0,0,3,3,3,4,4,3,0,0,0,0,0,0,3,3,0,0,
                6,0,3,5,5,3,0,0,0,0,3,5,5,5,3,4,4,3,0,0,0,0,3,5,5,3,0,
                6,3,5,5,5,5,3,0,0,3,5,5,5,5,5,3,3,3,3,0,0,3,5,5,5,5,3,
                6,3,5,5,5,3,3,0,0,3,5,5,5,5,5,3,4,4,5,3,0,3,3,5,5,5,3,
                6,0,3,5,5,3,5,3,3,4,5,5,5,5,5,5,3,3,5,3,3,5,3,5,5,3,0,
                6,0,0,3,5,5,5,5,3,4,5,5,1,2,2,2,5,5,2,3,5,5,5,5,3,0,0,
                6,0,0,0,3,5,5,5,3,4,5,1,2,2,3,3,1,3,2,3,4,5,5,3,0,0,0,
                6,0,0,0,0,3,5,5,4,3,5,1,2,2,3,3,1,3,2,3,4,4,3,0,0,0,0,
                6,0,0,0,0,0,3,4,4,3,5,1,1,2,2,2,1,2,1,3,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,3,4,4,3,5,1,1,3,3,3,1,3,4,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,3,4,4,3,1,3,3,3,3,3,4,3,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,3,4,4,4,3,1,3,3,3,4,4,3,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,3,3,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,5,4,4,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,4,4,4,5,5,3,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,5,5,5,5,4,4,4,5,5,5,3,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,4,3,3,3,3,5,5,5,5,3,0,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,4,3,0,0,0,0,3,5,5,5,5,3,0,0,0,
                6,0,0,0,0,0,0,0,0,3,4,4,5,3,0,0,0,0,3,5,5,5,5,5,3,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,3,3,5,5,5,5,3,0,0,
                6,0,0,0,0,0,0,0,0,3,5,5,5,5,3,0,0,0,0,0,3,3,3,3,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 3) {
                        fill(0, 0, 0);
                    } else if (pixels[i] === 4) {
                        fill(160,200,230);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        }
    },
    // Stores values for how to draw pit
    pit: {
        icon: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [
            0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
            6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,
            6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,
            6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,
            6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,
            6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,
            6,0,0,1,0,2,2,2,2,2,0,0,3,3,3,0,
            6,0,1,0,0,0,1,1,2,3,3,2,2,2,3,3,
            6,0,1,0,0,0,2,2,3,3,3,2,1,2,2,3,
            6,0,1,2,0,0,3,3,3,3,2,2,2,1,2,0,
            6,0,1,2,1,2,3,3,3,2,2,2,2,1,2,0,
            6,2,2,2,1,2,3,3,3,3,2,2,2,1,1,0,
            6,0,2,2,1,1,3,3,3,3,3,2,2,0,3,3,
            6,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,0,3,3,3,3,3,3,3,3,0,0,0,
            6,0,0,0,0,2,2,2,0,2,2,2,0,0,0,0,
            6,0,0,0,2,2,2,0,0,2,2,2,0,0,0
                
               
            ];
                
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(115, 36, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 138, 92);
                    } else if (pixels[i] === 3) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
            0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
            6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,
            6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,
            6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,
            6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,
            6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,
            6,0,0,1,0,2,2,2,2,2,0,0,3,3,3,0,
            6,0,1,0,0,0,1,1,2,3,3,2,2,2,3,3,
            6,0,1,0,0,0,2,2,3,3,3,2,1,2,2,3,
            6,0,1,2,0,0,3,3,3,3,2,2,2,1,2,0,
            6,0,1,2,1,2,3,3,3,2,2,2,2,1,2,0,
            6,2,2,2,1,2,3,3,3,3,2,2,2,1,1,0,
            6,0,2,2,1,1,3,3,3,3,3,2,2,0,3,3,
            6,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,0,3,3,3,3,3,3,3,3,0,0,0,
            6,0,0,0,0,2,2,2,0,2,2,2,0,0,0,0,
            6,0,0,0,2,2,2,0,0,2,2,2,0,0,0,0,
            6,0,0,0,2,2,2,0,0,2,2,2,2,1,0,0,
            6,0,0,0,1,1,1,0,0,0,2,2,2,1,2,0,
            6,0,0,0,2,1,2,0,0,0,0,1,1,1,3,1,
            6,0,0,2,2,3,2,0,0,0,0,0,2,2,1,0,
            6,0,1,1,1,1,1,1,0,0,0,1,1,1,0,
                
               
            ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(115, 36, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 138, 92);
                    } else if (pixels[i] === 3) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                x-= 15 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
            0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
            6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,
            6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,
            6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,
            6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,
            6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,
            6,0,0,1,0,2,2,2,2,2,0,0,3,3,3,0,
            6,0,1,0,0,0,1,1,2,3,3,2,2,2,3,3,
            6,0,1,0,0,0,2,2,3,3,3,2,1,2,2,3,
            6,0,1,2,0,0,3,3,3,3,2,2,2,1,2,0,
            6,0,1,2,1,2,3,3,3,2,2,2,2,1,2,0,
            6,2,2,2,1,2,3,3,3,3,2,2,2,1,1,0,
            6,0,2,2,1,1,3,3,3,3,3,2,2,0,3,3,
            6,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,0,3,3,3,3,3,3,3,3,0,0,0,
            6,0,0,0,0,2,2,2,0,2,2,2,0,0,0,0,
            6,0,0,0,2,2,2,0,0,2,2,2,0,0,0,0,
            6,0,0,0,2,2,2,0,0,2,2,2,2,1,0,0,
            6,0,0,0,1,1,1,0,0,0,2,2,2,1,2,0,
            6,0,0,0,2,1,2,0,0,0,0,1,1,1,3,1,
            6,0,0,2,2,3,2,0,0,0,0,0,2,2,1,0,
            6,0,1,1,1,1,1,1,0,0,0,1,1,1,0,
                
               
            ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(115, 36, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 138, 92);
                    } else if (pixels[i] === 3) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
            x-= 1 * size;
            
            var xP = x;
            var yP = y;
            
            var pixels = [
        0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,
        6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
        6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
        6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,0,
        6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,0,
        6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,0,
        6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,0,
        6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,0,
        6,0,0,1,0,2,2,2,2,2,0,0,3,3,3,0,0,
        6,0,1,0,0,0,1,1,2,3,3,2,2,2,3,3,0,
        6,0,1,0,0,0,2,2,3,3,3,2,1,2,2,3,0,
        6,0,1,2,0,0,3,3,3,3,2,2,2,1,2,0,0,
        6,0,1,2,1,2,3,3,3,2,2,2,2,1,2,0,0,
        6,2,2,2,1,2,3,3,3,3,2,2,2,1,1,0,0,
        6,0,2,2,1,1,3,3,3,3,3,2,2,0,3,3,0,
        6,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
        6,0,0,1,0,3,3,3,3,3,3,3,3,0,0,0,0,
        6,0,0,0,0,2,2,2,0,0,2,2,2,2,1,0,0,
        6,0,0,0,0,1,1,1,0,0,0,2,2,2,1,2,0,
        6,0,0,0,0,2,1,2,0,0,0,0,1,1,1,3,1,
        6,0,0,0,2,2,3,2,0,0,0,0,0,2,2,1,0,
        6,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0];
            
            for (var i = pixels.length; i > 0; i--) {
                if (pixels[i] === 1) {
                    fill(115, 36, 0);
                } else if (pixels[i] === 2) {
                    fill(255, 138, 92);
                } else if (pixels[i] === 3) {
                    fill(255, 255, 255);
                } else if (pixels[i] === 4) {
                    fill(28, 28, 28);
                } else if (pixels[i] === 5) {
                    fill(50,115,225);
                } else if (pixels[i] === 6) {
                    yP-=size;
                    xP = x;
                    continue;
                } else {
                    xP-=size;
                    continue;
                }
                
                rect(xP, yP, size, size);
                xP-=size;
            }
        }
        },
        duckRight: {
            draw: function(x, y, size) {
                x-= 16 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
            0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
            6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
            6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,0,
            6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,0,
            6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,0,
            6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,0,
            6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,0,
            6,0,0,1,0,2,2,2,2,2,0,0,3,3,3,0,0,
            6,0,1,0,0,0,1,1,2,3,3,2,2,2,3,3,0,
            6,0,1,0,0,0,2,2,3,3,3,2,1,2,2,3,0,
            6,0,1,2,0,0,3,3,3,3,2,2,2,1,2,0,0,
            6,0,1,2,1,2,3,3,3,2,2,2,2,1,2,0,0,
            6,2,2,2,1,2,3,3,3,3,2,2,2,1,1,0,0,
            6,0,2,2,1,1,3,3,3,3,3,2,2,0,3,3,0,
            6,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
            6,0,0,1,0,3,3,3,3,3,3,3,3,0,0,0,0,
            6,0,0,0,0,2,2,2,0,0,2,2,2,2,1,0,0,
            6,0,0,0,0,1,1,1,0,0,0,2,2,2,1,2,0,
            6,0,0,0,0,2,1,2,0,0,0,0,1,1,1,3,1,
            6,0,0,0,2,2,3,2,0,0,0,0,0,2,2,1,0,
            6,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(115, 36, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 138, 92);
                    } else if (pixels[i] === 3) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,
                6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,
                6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,
                6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,0,0,0,0,
                6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,0,0,0,0,
                6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,0,0,0,0,
                6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,0,0,0,0,
                6,0,0,0,1,2,2,2,2,2,0,0,0,3,3,3,3,3,0,0,
                6,0,0,1,0,0,0,1,2,3,3,2,2,2,3,3,3,0,0,0,
                6,0,0,1,0,0,0,0,3,3,3,3,3,2,2,2,0,0,0,0,
                6,0,0,1,2,0,0,3,3,3,3,2,1,1,2,2,2,0,0,0,
                6,0,0,1,2,2,1,3,3,2,2,2,2,2,1,2,2,0,0,0,
                6,0,2,2,2,2,1,3,3,3,2,2,2,2,1,2,0,0,0,0,
                6,0,0,2,2,2,1,3,3,3,3,2,2,2,1,0,0,0,0,0,
                6,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,
                6,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,0,1,0,0,
                6,0,0,0,0,0,0,0,0,2,1,2,2,2,0,0,2,1,0,0,
                6,0,0,0,0,0,0,0,0,2,1,2,2,2,2,1,2,2,1,0,
                6,0,0,0,0,0,0,0,0,0,2,1,2,2,2,1,1,3,1,0,
                6,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,1,0,
                6,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,2,2,1,0,
                6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,1
            ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(115, 36, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 138, 92);
                    } else if (pixels[i] === 3) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 18 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,
                6,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
                6,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,
                6,0,0,1,1,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,
                6,0,0,0,2,1,3,2,1,1,1,1,1,0,0,0,0,0,0,0,
                6,0,0,2,2,1,3,2,1,2,2,1,1,0,0,0,0,0,0,0,
                6,0,0,0,2,2,2,2,1,2,2,1,0,0,0,0,0,0,0,0,
                6,0,0,0,2,1,1,2,2,2,1,1,0,0,0,0,0,0,0,0,
                6,0,0,0,1,2,2,2,2,2,0,0,0,3,3,3,3,3,0,0,
                6,0,0,1,0,0,0,1,2,3,3,2,2,2,3,3,3,0,0,0,
                6,0,0,1,0,0,0,0,3,3,3,3,3,2,2,2,0,0,0,0,
                6,0,0,1,2,0,0,3,3,3,3,2,1,1,2,2,2,0,0,0,
                6,0,0,1,2,2,1,3,3,2,2,2,2,2,1,2,2,0,0,0,
                6,0,2,2,2,2,1,3,3,3,2,2,2,2,1,2,0,0,0,0,
                6,0,0,2,2,2,1,3,3,3,3,2,2,2,1,0,0,0,0,0,
                6,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,
                6,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,0,1,0,0,
                6,0,0,0,0,0,0,0,0,2,1,2,2,2,0,0,2,1,0,0,
                6,0,0,0,0,0,0,0,0,2,1,2,2,2,2,1,2,2,1,0,
                6,0,0,0,0,0,0,0,0,0,2,1,2,2,2,1,1,3,1,0,
                6,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,1,0,
                6,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,2,2,1,0,
                6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,1
            ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(115, 36, 0);
                    } else if (pixels[i] === 2) {
                        fill(255, 138, 92);
                    } else if (pixels[i] === 3) {
                        fill(255, 255, 255);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        }
    },
    // Stores values for how to draw rob
    rob: {
        icon: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,0,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,0,3,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = 0; i < pixels.length; i++) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP+=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        left: {
            draw: function(x, y, size) {
                x-= 19 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,0,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,0,3,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        right: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,0,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,0,3,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        duckLeft: {
            draw: function(x, y, size) {
                x-= 19 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,3,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,03,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        duckRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,3,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,03,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = pixels.length; i > 0; i--) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        },
        jumpLeft: {
            draw: function(x, y, size) {
                x-= 19 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,0,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,0,3,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP+=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP+=size;
                }
            }
        },
        jumpRight: {
            draw: function(x, y, size) {
                x-= 1 * size;
                
                var xP = x;
                var yP = y;
                
                var pixels = [
                0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,1,2,1,1,2,1,1,1,4,3,0,0,0,0,0,
                6,0,0,0,0,0,0,0,1,2,2,2,1,1,1,3,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,3,3,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,0,2,1,1,2,2,2,1,0,0,0,0,0,0,0,
                6,0,0,0,0,0,0,3,2,1,1,2,2,2,2,2,2,2,0,2,2,2,
                6,0,0,0,0,0,3,0,2,2,2,2,2,2,3,3,3,2,3,2,2,2,
                6,0,0,0,0,3,0,0,0,0,3,3,3,0,0,0,0,3,3,3,3,2,
                6,0,0,0,3,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,
                6,0,0,3,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,
                6,0,0,0,3,3,2,2,3,2,1,1,1,2,3,2,2,0,0,0,0,0,
                6,0,0,0,0,0,3,3,3,3,2,2,2,3,3,3,3,0,0,0,0
               
            ];
                
                for (var i = pixels.length; i > 0; i --) {
                    if (pixels[i] === 1) {
                        fill(240,220,185);
                    } else if (pixels[i] === 2) {
                        fill(133, 133, 133);
                    } else if (pixels[i] === 3) {
                        fill(87, 87, 87);
                    } else if (pixels[i] === 4) {
                        fill(28, 28, 28);
                    } else if (pixels[i] === 5) {
                        fill(50,115,225);
                    } else if (pixels[i] === 6) {
                        yP-=size;
                        xP = x;
                        continue;
                    } else {
                        xP-=size;
                        continue;
                    }
                    
                    rect(xP, yP, size, size);
                    xP-=size;
                }
            }
        }
    },
    // Stores values for how to draw the random icon
    random: {
        draw: function(x, y, size) {
            x-= 1 * size;
            
            var xP = x;
            var yP = y;
            
            var pixels = [
            0,1,1,1,1,1,0,0,
            3,1,1,2,2,2,1,1,0,
            3,1,1,2,0,0,1,1,2,
            3,1,1,2,0,0,1,1,2,
            3,0,2,2,0,1,1,1,2,
            3,0,0,0,1,1,2,2,2,
            3,0,0,0,1,1,2,0,0,
            3,0,0,0,0,2,2,0,0,
            3,0,0,0,1,1,0,0,0,
            3,0,0,0,1,1,2,0,0,
            3,0,0,0,0,2,2,0];
            
            for (var i = pixels.length; i > 0; i--) {
                if (pixels[i] === 1) {
                    fill(255, 255, 255);
                } else if (pixels[i] === 2) {
                    fill(0, 0, 0);
                } else if (pixels[i] === 3) {
                    yP-=size;
                    xP = x;
                    continue;
                } else {
                    xP-=size;
                    continue;
                }
                
                rect(xP, yP, size, size);
                xP-=size;
            }
        }
    }
};

// Stores the function to draw every map in the game (total of 3)
var maps = {
    pokemon: {
        name: "Pokemon Stadium", // The map name
        draw: {
            // The function to draw the backdrop (called first)
            backdrop: function(x, y) {
                fill(11, 32, 46,250);
                rect(0, 0, width, height);
                
                var font = 'IMPACT';
                textFont(font,34);
                
                // Screen
                fill(140, 140, 140);
                rect(x + 120,y + 10,160,100);
                
                fill(0, 0, 0);
                rect(x + 125,y + 25,150,80);
                
                fill(255, 0, 0);
                textSize(32);
                textAlign(CENTER, CENTER);
                text('VS',x + 200,y + 60);
                
                // Sky
                noStroke();
                fill(87, 240, 227,10); //sky blur
                ellipse(x + 200,y + 275,470,515);
                
                fill(87, 240, 227,9);
                ellipse(x + 200,y + 200,510,515);
                
                fill(87, 240, 227,8);
                ellipse(x + 200,y + 255,540,510);  
                
                fill(247, 255, 0,10);
                ellipse(x + 200,y + 300,500,375);
                
                fill(247, 255, 0,10);
                ellipse(x + 195,y + 270,270,100);
                
                // Crowd
                noStroke();
                fill(92, 92, 92);//stadium bottom
                ellipse(x + 200,y + 430,505,150);
                
                fill(150, 150, 150);
                ellipse(x + 200,y + 435,505,150);
                
                fill(92, 92, 92,100);
                ellipse(x + 200,y + 440,505,150);
                
                fill(74, 74, 74,100);
                rect(x + 140,y + 375,20,100);
                rect(x + 170,y + 375,20,100);
                rect(x + 200,y + 370,20,100);   
                rect(x + 240,y + 375,20,100);   
                rect(x + 270,y + 380,25,100);   
                rect(x + 100,y + 380,25,100);
                rect(x + 60,y + 390,25,100);
                rect(x + 60,y + 390,25,100);
                rect(x + 300,y + 390,25,100);
                 
                noStroke();
                fill(71, 71, 71);
                ellipse(x + 200,y + 460,400,155);
            },
            // The function to draw the foreground (called second)
            foreground: function(x, y) {
                fill(120, 120, 120);
                    
                noStroke();
                fill(185, 185, 185);//platform
                rect(x + 28,y + 260,340,25);
                
                fill(138, 138, 138);
                quad(x + 35,y + 290,x + 70,y + 320,x + 330,y + 320,x + 365,y + 290);
                
                fill(255, 0, 0);
                quad(x + 50,y + 300,x + 70,y + 320,x + 330,y + 320,x + 350,y + 300);
                
                fill(77, 77, 77);
                quad(x + 60,y + 310,x + 70,y + 320,x + 330,y + 320,x + 340,y + 310);
                
                fill(22, 120, 45);
                rect(x + 30,y + 265,335,20);
                
                fill(0, 0, 0);
                rect(x + 30,y + 285,335,10);
                
                fill(0, 0, 0);
                rect(x + 65,y + 315,270,3);
                rect(x + 65,y + 320,270,3);
                    
                stroke(0, 0, 0);
                fill(255, 0, 0);//poke ball
                ellipse(x + 200,y + 275,80,20);
                
                fill(255, 255, 255);
                ellipse(x + 180,y + 275,80,20);
                noStroke();
                fill(255, 0, 0);
                rect(x + 185,y + 265,35,20);
                            
                strokeWeight(8);
                stroke(0, 0, 0);
                line(x + 190,y + 290,x + 190,y + 270);
                fill(255, 255, 255);
                strokeWeight(4);
                ellipse(x + 190,y + 275,20,15);
                            
                noStroke();
                fill(230, 10, 10);
                rect(x + 280,y + 190,110,10);
                rect(x + 15,y + 190,110,10);
                
                fill(10, 145, 15);
                rect(x + 300,y + 190,75,3);
                rect(x + 30,y + 190,75, 3);
                
                fill(30, 110, 0);
                rect(x + 295,y + 200,80,5);
                rect(x + 295,y + 200,80,1);
                rect(x + 30,y + 200,80,5);
                rect(x + 30,y + 200,80,1);
            },
            // Array that stores collision for the map
            platforms: ["280|190|110|10", "15|190|110|10", "30|285|335|10"]
        },
        spawns: {
            // The starting locations for each player
            x: [50, 150, 250, 350],
            y: [100, 200, 200, 100]
        }
    },
    final: {
        name: "Final Destination",
        draw: {
            backdrop: function(x, y) {
                fill(0, 0, 0);
                rect(0, 0, width, height);
                
                noStroke();
                
                fill(255, 255, 255);
                ellipse(38,152,2,2);
                ellipse(88,210,2,2);
                ellipse(172,116,2,2);
                ellipse(88,58,2,2);
                ellipse(321,118,2,2);
                ellipse(381,62,2,2);
                ellipse(200,159,1,1);
                ellipse(353,159,1,1);
                ellipse(281,209,1,1);
                ellipse(152,206,2,2);
                fill(211, 224, 65);
                ellipse(288,45,3.5,3.5);
                ellipse(331,244,3.5,3.5);
               
             
                fill(0, 247, 255,50);
                ellipse(200,-56,328,142);
                fill(0, 247, 255,40);
                ellipse(199,-38,350,167);
                fill(0, 247, 255,10);
                ellipse(219,11,571,167);
                
            },
            foreground: function(x, y) {
                noStroke();
                
                fill(0, 217, 255,30);// BACKGROUND
                ellipse(201,319,216,61);
                fill(0, 217, 255,20);
                ellipse(201,325,259,61);
                fill(196, 196, 196);
                rect(200,327,26,55);
                rect(200,327,26,55);
                rect(159,327,31,40);
                rect(262,325,9,30);
                rect(262,332,4,30);
                rect(186,346,4,30);
                rect(123,326,34,15);
                rect(139,333,8,15);
                rect(232,324,15,36);
                rect(73,327,256,3);
                rect(73,331,256,3);
                
                fill(89, 89, 89);
                rect(203,330,10,55);//shades
                rect(200,297,26,55);
                rect(165,327,21,40);
                rect(262,325,4,30);
                rect(262,332,4,3);
                rect(186,346,-2,30);
                rect(123,326,34,10);
                rect(139,327,8,15);
                rect(234,319,15,36);
                
                fill(117, 117, 117);//FOREGROUND
                quad(33,286,70,320,330,320,364,287); 
                fill(0, 111, 255);
                quad(50,300,70,320,330,320,350,300); 
                fill(74, 72, 72);
                quad(58,309,70,320,330,320,341,310); 
                rect(34,275,330,12);
                fill(153, 153, 153);
                rect(30,285,335,10);
                fill(153, 153, 153);
                rect(65,320,270,3);
                rect(65,324,270,3);
            },
            platforms: ["30|285|335|10"]
        },
        spawns: {
            x: [100, 150, 250, 300],
            y: [200, 200, 200, 200]
        }
    },
    battlefield: {
        name: "Battlefield",
        draw: {
            backdrop: function(x, y) {
                fill(8, 190, 240);// background shade
                rect(0, 0, width, height);
                
                noStroke();
                fill(5, 174, 235,200);
                ellipse(200,35,470,150);
                
                fill(5, 174, 235,100);
                ellipse(200,55,470,150);
                
                fill(5, 174, 235,150);
                ellipse(200,75,475,150); 
                
                fill(31, 251, 255);//moon
                ellipse(200,230,250,250);
                
                
                fill(219, 219, 219);//backcloud
                ellipse(210,340,645,210);
                
                fill(199, 193, 199);//backcloud 2
                ellipse(470,320,305,210);
                
                
                fill(252, 252, 252);//backcloud 3
                ellipse(20,430,305,210);
                
                fill(252, 252, 252);//backcloud 3
                ellipse(345,430,305,210);
                
                fill(235, 235, 235);
                ellipse(215,405,100,55);
                
                fill(196, 196, 196);
                ellipse(160,400,100,30);
                
                fill(235, 235, 235);
                ellipse(100,400,100,60);
                    
                fill(255, 255, 255);
                ellipse(330,410,175,135);
                
                fill(196, 196, 196);
                ellipse(25,385,130,100);
                
                fill(235, 235, 235);
                ellipse(100,400,100,55);
                    
                fill(196, 196, 196);
                ellipse(405,375,130,140);
                
                fill(235, 235, 235);
                ellipse(-10,325,100,60);
            },
            foreground: function(x, y) {
                noStroke();
                
                fill(59, 59, 59);
                rect(209+x,298+y,17,67);//bottom pillars
                
                fill(97, 97, 97);
                rect(184+x,295+y,17,39);
                
                fill(56, 56, 56);
                rect(228+x,291+y,10,39);
                
                fill(56, 56, 56);
                rect(147+x,291+y,15,31);
                
                fill(135, 132, 135);
                rect(152+x,298+y,17,18);
                
                fill(97, 97, 97);
                rect(242+x,295+y,17,39);
                
                fill(56, 56, 56);
                rect(188+x,291+y,10,39);
                
                fill(56, 56, 56);
                rect(202+x,292+y,6,31);
                
                fill(59, 59, 59);
                rect(251+x,298+y,17,13);
                
                fill(97, 97, 97);
                rect(131+x,295+y,17,39);
                
                fill(130, 130, 130);
                rect(264+x,291+y,10,39);
                
                fill(56, 56, 56);
                rect(168+x,291+y,15,31);
                
                fill(128, 128, 128);//platform
                rect(105+x,253+y,187,27);
                
                fill(84, 84, 84);
                rect(55+x,265+y,295,15);
                
                fill(97, 97, 97);
                rect(72+x,275+y,252,16);
                
                fill(97, 91, 91);
                rect(105+x,284+y,188,16);
                
                fill(163, 163, 163);
                ellipse(197+x,271+y,171,17);
                
                fill(0, 255, 255);
                ellipse(197+x,268+y,141,20);
                
                fill(91, 97, 97);
                ellipse(197+x,268+y,141,17);
            
                rect(275,175,100,5);
                rect(25,175,100,5);
                rect(145,90,100,5);
            },
            platforms: ["275|175|100|5", "25|175|100|5", "145|90|100|5", "55|265|295|15"]
        },
        spawns: {
            x: [100, 300, 200, 200],
            y: [100, 100, 200, 0]
        }
    }
};

// Array of every player
var allPlayers = [players.one, players.two, players.three, players.four];
// Value used for flashing banner
var bannerBrightness = 0;

// Functions to set values in the game object
var setGameState = function(state) {
    game.state = state;
};
var setGameMap = function(map) {
    game.map = map;
};
var setGameRulesMode = function(mode) {
    game.rules.mode = mode;
};
var setGameRulesLives = function(lives) {
    game.rules.lives = lives;
};
var setGameRulesTime = function(time) {
    game.rules.time = time;
};

// Functions to get values from the game object
var getGameState = function() {
    return game.state;
};
var getGameMap = function() {
    return game.map;
};
var getGameRulesMode = function() {
    return game.rules.mode;
};
var getGameRulesLives = function() {
    return game.rules.lives;
};
var getGameRulesTime = function() {
    return game.rules.time;
};

// Functions to set values in the players object
var setPlayerController = function(player, controller) {
    player.controller = controller;
};
var setPlayerColor = function(player, r, g, b) {
    player.color[0] = r;
    player.color[1] = g;
    player.color[2] = b;
};
var setPlayerSpriteType = function(player, type) {
    player.character.sprite.type = type;
};
var setPlayerSpriteData = function(player, data) {
    player.character.sprite.data = data;
};
var setPlayerSize = function(player, size) {
    player.character.size = size;
};
var setPlayerLoc = function(player, x, y) {
    player.character.loc[0] = x;
    player.character.loc[1] = y;
};
var setPlayerVelocity = function(player, x, y) {
    player.character.velocity[0] = x;
    player.character.velocity[1] = y;
};
var setPlayerLives = function(player, lives) {
    player.character.lives = lives;
};
var setPlayerDamage = function(player, damage) {
    player.character.damage = damage;
};

// Functions to get values from the players object
var getPlayerController = function(player) {
    return player.controller;
};
var getPlayerColor = function(player) {
    return player.color;
};
var getPlayerSpriteType = function(player) {
    return player.character.sprite.type;
};
var getPlayerSpriteData = function(player) {
    return player.character.sprite.data;
};
var getPlayerSize = function(player) {
    return player.character.size;
};
var getSpriteCollision = function(type, data, size) {
    var width = 0;
    var height = 0;
    
    if (type === 1) {
        width = 28 * size / 2;
        height = 53 * size / 2;
    } else if (type === 2) {
        width = 32 * size / 2;
        height = 63 * size / 2;
    } else if (type === 3) {
        width = 32 * size / 2;
        height = 32 * size / 2;
    } else if (type === 4) {
        width = 40 * size / 2;
        height = 61 * size / 2;
    } else if (type === 5) {
        width = 42 * size / 2;
        height = 48 * size / 2;
    } else if (type === 6) {
        width = 30 * size / 2;
        height = 46 * size / 2;
    } else if (type === 7) {
        width = 38 * size / 2;
        height = 32 * size / 2;
    }
    
    return [width, height];
};
var getPlayerSpriteCollision = function(player) {
    var type = getPlayerSpriteType(player);
    var data = getPlayerSpriteData(player);
    var size = getPlayerSize(player);
    
    return getSpriteCollision(type, data, size);
};
var getPlayerSpriteName = function(player) {
    var type = getPlayerSpriteType(player);
    
    if (type === 0) {
        return "Cursor";
    } else if (type === 1) {
        return "Mario";
    } else if (type === 2) {
        return "Link";
    } else if (type === 3) {
        return "Kirby";
    } else if (type === 4) {
        return "Samus";
    } else if (type === 5) {
        return "Megaman";
    } else if (type === 6) {
        return "Pit";
    } else if (type === 7) {
        return "R.O.B.";
    } else {
        return "Oh noes!";
    }
};
var getPlayerSpriteJumps = function(player) {
    var type = getPlayerSpriteType(player);
    
    if (type === 1) {
        return 2;
    } else if (type === 2) {
        return 2;
    } else if (type === 3) {
        return 6;
    } else if (type === 4) {
        return 2;
    } else if (type === 5) {
        return 2;
    } else if (type === 6) {
        return 5;
    } else if (type === 7) {
        return 2;
    } else {
        return 0;
    }
};
var getPlayerLoc = function(player) {
    return player.character.loc;
};
var getPlayerVelocity = function(player) {
    return player.character.velocity;
};
var getPlayerLives = function(player, lives) {
    return player.character.lives;
};
var getPlayerDamage = function(player, damage) {
    return player.character.damage;
};

var tempPressedUp = []; // Stores if the up key has been pressed for each player
var tempPressedDown = []; // Stores if the down key has been pressed for each player

// Functions that return is specific keys are pressed
var upIsPressed = function(player) {
    return keys[player.keys.up];
};
var upIsReleased = function(player) {
    if (player === players.one) {
        if (tempPressedUp[0] && upIsPressed(player) === false) {
            tempPressedUp[0] = false;
            return true;
        }
    } else if (player === players.two) {
        if (tempPressedUp[1] && upIsPressed(player) === false) {
            tempPressedUp[1] = false;
            return true;
        }
    } else if (player === players.three) {
        if (tempPressedUp[2] && upIsPressed(player) === false) {
            tempPressedUp[2] = false;
            return true;
        }
    } else if (player === players.four) {
        if (tempPressedUp[3] && upIsPressed(player) === false) {
            tempPressedUp[3] = false;
            return true;
        }
    }
    
    return false;
};
var downIsPressed = function(player) {
    return keys[player.keys.down];
};
var downIsReleased = function(player) {
    if (player === players.one) {
        if (tempPressedDown[0] && downIsPressed(player) === false) {
            tempPressedDown[0] = false;
            return true;
        }
    } else if (player === players.two) {
        if (tempPressedDown[1] && downIsPressed(player) === false) {
            tempPressedDown[1] = false;
            return true;
        }
    } else if (player === players.three) {
        if (tempPressedDown[2] && downIsPressed(player) === false) {
            tempPressedDown[2] = false;
            return true;
        }
    } else if (player === players.four) {
        if (tempPressedDown[3] && downIsPressed(player) === false) {
            tempPressedDown[3] = false;
            return true;
        }
    }
    
    return false;
};
var leftIsPressed = function(player) {
    return keys[player.keys.left];
};
var rightIsPressed = function(player) {
    return keys[player.keys.right];
};
var standardIsPressed = function(player) {
    return keys[player.keys.standard];
};
var specialIsPressed = function(player) {
    return keys[player.keys.special];
};

// These functions will only be called the first time the corresponding key is pressed
var upIsPressedOnce = function(player) {
    if (upIsPressed(player)) {
        if (player === players.one) {
            if (tempPressedUp[0]) {
                return false;
            } else {
                tempPressedUp[0] = true;
            }
        } else if (player === players.two) {
            if (tempPressedUp[1]) {
                return false;
            } else {
                tempPressedUp[1] = true;
            }
        } else if (player === players.three) {
            if (tempPressedUp[2]) {
                return false;
            } else {
                tempPressedUp[2] = true;
            }
        } else if (player === players.four) {
            if (tempPressedUp[3]) {
                return false;
            } else {
                tempPressedUp[3] = true;
            }
        }
        
        return true;
    }
    
    return false;
};
var downIsPressedOnce = function(player) {
    if (downIsPressed(player)) {
        if (player === players.one) {
            if (tempPressedDown[0]) {
                return false;
            } else {
                tempPressedDown[0] = true;
            }
        } else if (player === players.two) {
            if (tempPressedDown[1]) {
                return false;
            } else {
                tempPressedDown[1] = true;
            }
        } else if (player === players.three) {
            if (tempPressedDown[2]) {
                return false;
            } else {
                tempPressedDown[2] = true;
            }
        } else if (player === players.four) {
            if (tempPressedDown[3]) {
                return false;
            } else {
                tempPressedDown[3] = true;
            }
        }
        
        return true;
    }
    
    return false;
};

var tempPressedAttack = []; // Stores if any attack key (standard or special) has been pressed for each player
var tempPressedMove = []; // Stores if any move key has been pressed for each player

// Returns true if the player is pressing any key
var anyKeyIsPressed = function(player) {
    if (upIsPressed(player) || downIsPressed(player) || leftIsPressed(player) || rightIsPressed(player) || standardIsPressed(player) || specialIsPressed(player)) {
        return true;
    }
    
    return false;
};
// Returns true if the player is pressing any move key
var anyMoveKeyIsPressed = function(player) {
    if (upIsPressed(player) || downIsPressed(player) || leftIsPressed(player) || rightIsPressed(player)) {
        if (player === players.one) {
            tempPressedMove[0] = true;
        } else if (player === players.two) {
            tempPressedMove[1] = true;
        } else if (player === players.three) {
            tempPressedMove[2] = true;
        } else if (player === players.four) {
            tempPressedMove[3] = true;
        }
        
        return true;
    }
    
    return false;
};
// Returns true the first time called if the player isn't pressing any move key
var anyMoveKeyIsReleased = function(player) {
    if (player === players.one) {
        if (tempPressedMove[0] && anyMoveKeyIsPressed(player) === false) {
            tempPressedMove[0] = false;
            return true;
        }
    } else if (player === players.two) {
        if (tempPressedMove[1] && anyMoveKeyIsPressed(player) === false) {
            tempPressedMove[1] = false;
            return true;
        }
    } else if (player === players.three) {
        if (tempPressedMove[2] && anyMoveKeyIsPressed(player) === false) {
            tempPressedMove[2] = false;
            return true;
        }
    } else if (player === players.four) {
        if (tempPressedMove[3] && anyMoveKeyIsPressed(player) === false) {
            tempPressedMove[3] = false;
            return true;
        }
    }
    
    return false;
};
 // Returns true if the player is pressing any attack key
var anyAttackKeyIsPressed = function(player) {
    if (standardIsPressed(player) || specialIsPressed(player)) {
        if (player === players.one) {
            tempPressedAttack[0] = true;
        } else if (player === players.two) {
            tempPressedAttack[1] = true;
        } else if (player === players.three) {
            tempPressedAttack[2] = true;
        } else if (player === players.four) {
            tempPressedAttack[3] = true;
        }
        
        return true;
    }
    
    return false;
};
// Returns true the first time called if the player isn't pressing any attack key
var anyAttackKeyIsReleased = function(player) {
    if (player === players.one) {
        if (tempPressedAttack[0] && anyAttackKeyIsPressed(player) === false) {
            tempPressedAttack[0] = false;
            return true;
        }
    } else if (player === players.two) {
        if (tempPressedAttack[1] && anyAttackKeyIsPressed(player) === false) {
            tempPressedAttack[1] = false;
            return true;
        }
    } else if (player === players.three) {
        if (tempPressedAttack[2] && anyAttackKeyIsPressed(player) === false) {
            tempPressedAttack[2] = false;
            return true;
        }
    } else if (player === players.four) {
        if (tempPressedAttack[3] && anyAttackKeyIsPressed(player) === false) {
            tempPressedAttack[3] = false;
            return true;
        }
    }
    
    return false;
};

// Returns true the first time called if the player is pressing any move key
var anyMoveKeyIsPressedOnce = function(player) {
    if (upIsPressed(player) || downIsPressed(player) || leftIsPressed(player) || rightIsPressed(player)) {
        if (player === players.one) {
            if (tempPressedMove[0]) {
                return false;
            } else {
                tempPressedMove[0] = true;
            }
        } else if (player === players.two) {
            if (tempPressedMove[1]) {
                return false;
            } else {
                tempPressedMove[1] = true;
            }
        } else if (player === players.three) {
            if (tempPressedMove[2]) {
                return false;
            } else {
                tempPressedMove[2] = true;
            }
        } else if (player === players.four) {
            if (tempPressedMove[3]) {
                return false;
            } else {
                tempPressedMove[3] = true;
            }
        }
        
        return true;
    }
    
    return false;
};
// Returns true the first time called if the player is pressing any attack key
var anyAttackKeyIsPressedOnce = function(player) {
    if (standardIsPressed(player) || specialIsPressed(player)) {
        if (player === players.one) {
            if (tempPressedAttack[0]) {
                return false;
            } else {
                tempPressedAttack[0] = true;
            }
        } else if (player === players.two) {
            if (tempPressedAttack[1]) {
                return false;
            } else {
                tempPressedAttack[1] = true;
            }
        } else if (player === players.three) {
            if (tempPressedAttack[2]) {
                return false;
            } else {
                tempPressedAttack[2] = true;
            }
        } else if (player === players.four) {
            if (tempPressedAttack[3]) {
                return false;
            } else {
                tempPressedAttack[3] = true;
            }
        }
        
        return true;
    }
    
    return false;
};

// Modifies the player x, y values by any given amount
var movePlayer = function(player, direction, amount) {
    if (direction === "UP") {
        setPlayerLoc(player, getPlayerLoc(player)[0], getPlayerLoc(player)[1] - amount);
    } else if (direction === "DOWN") {
        setPlayerLoc(player, getPlayerLoc(player)[0], getPlayerLoc(player)[1] + amount);
    } else if (direction === "LEFT") {
        setPlayerLoc(player, getPlayerLoc(player)[0] - amount, getPlayerLoc(player)[1]);
    } else if (direction === "RIGHT") {
        setPlayerLoc(player, getPlayerLoc(player)[0] + amount, getPlayerLoc(player)[1]);
    }
};

// Draws the flashing banner with an indicated message
var drawBanner = function(string, y) {
    if (bannerBrightness > 150) {
        bannerBrightness = 0;
    }
    
    bannerBrightness+=2;
    
    noStroke();
    fill(0, 0, 0); // Set the banner color
    rect(0, y, width, 50); // Draw the banner
    textAlign(CENTER, CENTER); // Align text
    textFont("impact", 35); // Set font
    fill(245, 245, 245, 255 - bannerBrightness); // Set the text color
    text(string, 200, y + 25); // Write the message
};
// Draws a specified sprite from the object of sprites
var drawSprite = function(type, data, x, y, size) {
    var sprite;
    
    if (type === 8) {
        sprites.random.draw(x, y, size);
    } else if (type === 0) {
        if (data === 0) {
            sprites.cursor.red.draw(x, y, size);
        } else if (data === 1) {
            sprites.cursor.blue.draw(x, y, size);
        } else if (data === 2) {
            sprites.cursor.yellow.draw(x, y, size);
        } else if (data === 3) {
            sprites.cursor.green.draw(x, y, size);
        }
    } else if (type === 1) {
        sprite = sprites.mario;
    } else if (type === 2) {
        sprite = sprites.link;
    } else if (type === 3) {
        sprite = sprites.kirby;
    } else if (type === 4) {
        sprite = sprites.samus;
    } else if (type === 5) {
        sprite = sprites.megaman;
    } else if (type === 6) {
        sprite = sprites.pit;
    } else if (type === 7) {
        sprite = sprites.rob;
    }
    
    if (sprite !== undefined) {
        if (data === 0) {
            sprite.icon.draw(x, y, size);
        } else if (data === 1) {
            sprite.right.draw(x, y, size);
        } else if (data === 2) {
            sprite.left.draw(x, y, size);
        } else if (data === 3) {
            sprite.duckRight.draw(x, y, size);
        } else if (data === 4) {
            sprite.duckLeft.draw(x, y, size);
        } else if (data === 5) {
            sprite.jumpRight.draw(x, y, size);
        } else if (data === 6) {
            sprite.jumpLeft.draw(x, y, size);
        } else if (data === 7 && type === 3) {
            sprite.suckRight.draw(x, y, size);
        } else if (data === 8 && type === 3) {
            sprite.suckLeft.draw(x, y, size);
        }
    }
};
// Draws the sprite that is assigned to the specified player
var drawPlayer = function(player) {
    drawSprite(getPlayerSpriteType(player), getPlayerSpriteData(player), getPlayerLoc(player)[0] + getPlayerSpriteCollision(player)[0], getPlayerLoc(player)[1] + getPlayerSpriteCollision(player)[1], getPlayerSize(player));
};
// Draws the specified map backdrop
var drawMapBackdrop = function(map, x, y) {
    if (map === 1) {
        maps.pokemon.draw.backdrop(x, y);
    } else if (map === 2) {
        maps.final.draw.backdrop(x, y);
    } else if (map === 3) {
        maps.battlefield.draw.backdrop(x, y);
    }
};
// Draws the specified map foreground
var drawMapForeground = function(map, x, y) {
    if (map === 1) {
        maps.pokemon.draw.foreground(x, y);
    } else if (map === 2) {
        maps.final.draw.foreground(x, y);
    } else if (map === 3) {
        maps.battlefield.draw.foreground(x, y);
    }
};
// Draws damage and live counter at the bottom of the screen for each player
var drawUI = function() {
        for (var p = 0; p < allPlayers.length; p++) {
            if (getPlayerController(allPlayers[p]) === 0) {
                continue;
            }
            
            fill(getPlayerColor(allPlayers[p])[0], getPlayerColor(allPlayers[p])[1], getPlayerColor(allPlayers[p])[2], 200);
            noStroke();
            rect(p * 100 + 5, 345, 90, 50);
            
            fill(255, 255, 255);
            textFont(createFont("impact Italic"), 30);
            textAlign(LEFT, CENTER);
            text("P" + (p + 1), p * 100 + 10, 370);
            
            textSize(20);
            fill(255, 255, 255, 255 - getPlayerDamage(allPlayers[p]));
            text(getPlayerDamage(allPlayers[p]) + "%", p * 100 + 45, 360);
            fill(255, 130, 70, getPlayerDamage(allPlayers[p]));
            text(getPlayerDamage(allPlayers[p]) + "%", p * 100 + 45, 360);
            
            if (getGameRulesMode() === 0) {
                for (var l = 0; l < getPlayerLives(allPlayers[p]); l++) {
                    fill(200, 200, 200);
                    stroke(100, 100, 100);
                    strokeWeight(2);
                    ellipse(p * 100 + l * 10 + 48, 382, 5, 5);
                }
            } else if (getGameRulesMode() === 1) {
                fill(170, 170, 170, 200);
                rect(305, 5, 90, 30);
                fill(255, 255, 255);
                textFont("impact", 20);
                textAlign(CENTER, CENTER);
                // var minutes = floor(getGameRulesTime() / 60);
                var minutes = floor(getGameRulesTime() / 60);
                var seconds = floor(getGameRulesTime() - (60 * minutes));
                var miliseconds = floor((getGameRulesTime() - (60 * minutes) - seconds) * 100);
                
                if (minutes <= 0) {
                    if (miliseconds < 10) {
                        text(seconds + ".0" + miliseconds, 350, 20);
                    } else {
                        text(seconds + "." + miliseconds, 350, 20);
                    }
                } else {
                    if (seconds < 10) {
                        text(minutes + ":0" + seconds, 350, 20);
                    } else {
                        text(minutes + ":" + seconds, 350, 20);
                    }
                }
            }
        }
    };
// Draws an indicator pointing towards the specified player
var drawIndicator = function(player) {
    var x = getPlayerLoc(player)[0];
    var y = getPlayerLoc(player)[1];
    var c = color(getPlayerColor(player)[0], getPlayerColor(player)[1], getPlayerColor(player)[2]);
    var radius = 25;
    
    if (x > 350) {
        x = 350;
    }
    
    if (x < 50) {
        x = 50;
    }
    
    if (y > 350) {
        y = 350;
    }
    
    if (y < 50) {
        y = 50;
    }
    
    noStroke();
    noFill();
    stroke(c);
    strokeWeight(5);
    ellipse(x, y, radius * 2, radius * 2);
    
    strokeWeight(1);
    noStroke();
    fill(c);
    
    var playerX = getPlayerLoc(player)[0];
    var playerY = getPlayerLoc(player)[1];
    
    pushMatrix();
    translate(x, y);
    
    var v1 = new PVector(playerX - x, playerY - y);
    var v2 = new PVector(0, -40);
    var angle = PVector.angleBetween(v1, v2);
    
    if (playerX - x > 0) {
        rotate(angle);
    } else {
        rotate(-angle);
    }
    
    triangle(-10, -30, 10, -30, 0, -40);
    popMatrix();
    
    drawSprite(getPlayerSpriteType(player), getPlayerSpriteData(player), x + getPlayerSpriteCollision(player)[0] / 4, y + getPlayerSpriteCollision(player)[1] / 4, 1);
};


// List of every projectile
var projectiles = [undefined, undefined, undefined, undefined];
// Projectile function
var projectile = function(player, x, y, type, size, direction) {
    this.player = player;
    this.x = x;
    this.y = y;
    this.type = type;
    this.size = size;
    this.direction = direction;
    
    projectiles[player] = this;
};
// Draws the projectile
projectile.prototype.draw = function() {
    pushMatrix();
    
    if (this.direction === LEFT) {
        translate(this.x - (30 + this.size), this.y);
        rotate(180);
    } else {
        translate(this.x, this.y);
    }
    
    if (this.type === 1) {
        var s = 25 + this.size;
        fill(255, 0, 0);
        ellipse(0, 0, s + 5, s);
        fill(255, 111, 0);
        ellipse(0, 0, (s + 5) / 1.5, s / 1.5);
        fill(255, 221, 0);
        ellipse(0, 0, (s + 5) / 2, s / 2);
    } else if (this.type === 2) {
        var s = 30 + this.size;
        fill(120, 90, 50);
        stroke(120, 90, 50);
        strokeWeight(s / 10);
        line(0 - (s / 3), 0, 0 - s, 0);
        noStroke();
        fill(255, 255, 255);
        triangle(0, 0, 0 - (s / 3), 0 + (s / 6), 0 - (s / 3), 0 - (s / 6));
    } else if (this.type === 4) {
        var s = 25 + this.size;
        fill(65, 130, 200);
        ellipse(0, 0, s, s);
        fill(0, 217, 255);
        ellipse(0, 0, (s / 1.5), (s / 1.5));
    } else if (this.type === 5) {
        var s = 25 + this.size;
        fill(175, 175, 175);
        ellipse(0, 0, s, s);
        fill(160, 160, 160);
        ellipse(0, 0, (s / 1.5), (s / 1.5));
    } else if (this.type === 6) {
        var s = 30 + this.size;
        fill(120, 90, 50);
        stroke(120, 90, 50);
        strokeWeight(s / 10);
        line(0 - (s / 3), 0, 0 - s, 0);
        noStroke();
        fill(255, 255, 255);
        triangle(0, 0, 0 - (s / 3), 0 + (s / 6), 0 - (s / 3), 0 - (s / 6));
    } else if (this.type === 7) {
        var s = 20 + this.size;
        fill(65, 130, 200);
        ellipse(0, 0, s, s);
        fill(0, 217, 255);
        ellipse(0, 0, (s / 1.6), (s / 1.6));
    }
    popMatrix();
};
// Moves the projectile
projectile.prototype.move = function(speed) {
    if ((this.direction === RIGHT && this.x > (430 + this.size)) || (this.direction === LEFT && this.x < (-30 - this.size))) {
        projectiles[this.player] = undefined;
    } else {
        var dir = 1;
        if (this.direction === LEFT) {
            dir = -1;
        }
        
        this.x = this.x + (speed * dir);
    }
};
// Checks if the projectile is colliding with another player
projectile.prototype.collision = function(x, y, width, height) {
    if (this.x + (this.size / 2) > x && this.x - (this.size / 2) < (x + width) && this.y + (this.size / 2) > y && this.y - (this.size / 2) < (y + height)) {
        return true;
    }
    
    return false;
};


// Functions to get values from the maps object
var getMapPlatforms = function(map, x, y) {
    var platforms = [];
    
    if (map === 1) {
        map = maps.pokemon;
    } else if (map === 2) {
        map = maps.final;
    } else if (map === 3) {
        map = maps.battlefield;
    }
    
    for (var i = 0; i < map.draw.platforms.length; i++) {
        var pX = parseInt(map.draw.platforms[i].split("|")[0], null) + x;
        var pY = parseInt(map.draw.platforms[i].split("|")[1], null) + y;
        var pWidth = parseInt(map.draw.platforms[i].split("|")[2], null) + x;
        var pHeight = parseInt(map.draw.platforms[i].split("|")[3], null) + y;
        
        append(platforms, pX + "|" + pY + "|" + pWidth + "|" + pHeight);
    }
    
    return platforms;
};
var getMapSpawnsX = function(map) {
    if (map === 1) {
        return maps.pokemon.spawns.x;
    } else if (map === 2) {
        return maps.final.spawns.x;
    } else if (map === 3) {
        return maps.battlefield.spawns.x;
    }
};
var getMapSpawnsY = function(map) {
    if (map === 1) {
        return maps.pokemon.spawns.y;
    } else if (map === 2) {
        return maps.final.spawns.y;
    } else if (map === 3) {
        return maps.battlefield.spawns.y;
    }
};
var getMapName = function(map) {
    if (map === 1) {
        return maps.pokemon.name;
    } else if (map === 2) {
        return maps.final.name;
    } else if (map === 3) {
        return maps.battlefield.name;
    } else {
        return "Random";
    }
};


// Used to draw the logo
var smashBall= function(x,y){
    stroke(0, 0, 0);
    fill(161, 161, 161);
    ellipse(200+x,200+y,46,46);
    
    noStroke();
    fill(255, 255, 255);
    rect(175+x,205+y,49,5);
    fill(255, 255, 255);
    rect(191+x,175+y,9,49);
};
var smashLogo = function() {
    var font = 'TIMES';
    textFont(font,56);
    textAlign(CENTER, CENTER);
    
    fill(0, 0, 0);
    text('SUPER',199,123-41);
    fill(161, 161, 161);
    text('SUPER',201,122-41);
    
    fill(0, 0, 0);//shade
    textSize(75);
    text('S',55-14,199-58);
    textSize(54);
    text('MAS',132-14,191-58);
    textSize(54);
    text('H',213-14,191-58);
    
    fill(161, 161, 161);//front grey letters
    textSize(75);
    text('S',54-14,197-58);
    textSize(54);
    text('MAS',134-14,190-58);
    textSize(54);
    text('H',211-14,191-58);
    
    fill(0, 0, 0);
    text('BRO',282,133);
    
    fill(161, 161, 161);
    text('BRO',280,133);
    
    textSize(75);
    fill(0, 0, 0);
    text('S',370-14,197-58);
    
    fill(161, 161, 161);
    text('S',368-14,197-58);
    
    noStroke();
    fill(0, 0, 0);
    ellipse(376,161,10,10);
    fill(161,161,161);
    ellipse(375,161,10,10);
};

// Variables used in game states
var selection = [];
var cursorX = 100; var cursorY = 160;
var ms = 0;
var anim = [];
var setup1 = false;
var lastHitBy = [4, 4, 4, 4];
var score = [0, 0, 0, 0];
var cooldownStandard = [0, 0, 0, 0];
var gameTimer = 0;
var ranking = [5, 5, 5, 5];
var airborn = [false, false, false, false];
var jumps = [0, 0, 0, 0];
var kirbyPower = [0, 0, 0, 0];
var wait = false;

var titleScreen = function() {
    background(245, 245, 245); // Background
    drawBanner("PRESS ANY BUTTON", 250); // Banner
    fill(0, 0, 0);
    textSize(20);
    text("Right-click for Instructions", 200, 315); // Sub text
    smashLogo(); // The logo of the game
    smashBall(119, -66);
    
    if (mouseIsPressed && mouseButton === RIGHT) {
        setGameState(1);
    } else if (keyIsPressed) {
        setGameState(2);
    }
    
    textFont("impact", 20);
    fill(0, 0, 0, 150);
    textAlign(RIGHT, BOTTOM);
    text("v" + version, 390, 390);
};

var instructions = function() {
    background(245, 245, 245);
    fill(0, 0, 0);
    textAlign(CENTER, CENTER);
    
    textSize(50);
    text("Instructions", 200, 30);
    
    textSize(18);
    textAlign(LEFT, CENTER);
    fill(115, 70, 255);
    text("Move", 70, 120);
    fill(165, 30, 245);
    text("Standard Attack", 112, 120);
    fill(255, 100, 255);
    text("Special Move", 232, 120);
    
    fill(140, 140, 140);
    stroke(0, 0, 0);
    rect(20, 160, 20, 20);
    rect(40, 160, 20, 20);
    rect(60, 160, 20, 20);
    rect(120, 160, 20, 20);
    rect(140, 160, 20, 20);
    rect(160, 160, 20, 20);
    rect(220, 160, 20, 20);
    rect(240, 160, 20, 20);
    rect(260, 160, 20, 20);
    rect(320, 160, 20, 20);
    rect(340, 160, 20, 20);
    rect(360, 160, 20, 20);
    
    rect(20, 180, 20, 20);
    rect(40, 180, 20, 20);
    rect(60, 180, 20, 20);
    rect(120, 180, 20, 20);
    rect(140, 180, 20, 20);
    rect(160, 180, 20, 20);
    rect(220, 180, 20, 20);
    rect(240, 180, 20, 20);
    rect(260, 180, 20, 20);
    rect(320, 180, 20, 20);
    rect(340, 180, 20, 20);
    rect(360, 180, 20, 20);
    
    var drawLetter = function(letter, x, y, type, code) {
        if (keyIsPressed && keys[code]) {
            fill(255, 255, 255);
        } else if (type === 0) {
            fill(255, 100, 255);
        } else if (type === 1) {
            fill(115, 70, 255);
        } else if (type === 2) {
            fill(165, 30, 245);
        }
        
        text(letter, x, y);
    };
    
	textAlign(LEFT, TOP);
	noStroke();
    drawLetter("Q", 25, 160, 0, 81);
    drawLetter("W", 43, 160, 1, 87);
    drawLetter("E", 65, 160, 2, 69);
    drawLetter("A", 25, 181, 1, 65);
    drawLetter("S", 45, 181, 1, 83);
    drawLetter("D", 65, 181, 1, 68);
    
    drawLetter("R", 125, 160, 0, 82);
    drawLetter("T", 145, 160, 1, 84);
    drawLetter("Y", 165, 160, 2, 89);
    drawLetter("F", 125, 181, 1, 70);
    drawLetter("G", 145, 181, 1, 71);
    drawLetter("H", 165, 181, 1, 72);
    
    drawLetter("U", 225, 160, 0, 85);
    drawLetter("I", 247, 160, 1, 73);
    drawLetter("O", 265, 160, 2, 79);
    drawLetter("J", 225, 181, 1, 74);
    drawLetter("K", 245, 181, 1, 75);
    drawLetter("L", 265, 181, 1, 76);
    
    drawLetter("<", 325, 160, 0, 188);
    drawLetter("↑", 345, 160, 1, 38);
    drawLetter(">", 365, 160, 2, 190);
    drawLetter("←", 321, 181, 1, 37);
    drawLetter("↓", 345, 181, 1, 40);
    drawLetter("→", 361, 181, 1, 39);
    
    textAlign(CENTER, CENTER);
    fill(75, 115, 230);
    text("Player 1", 50, 224);
    fill(230, 50, 50);
    text("Player 2", 150, 224);
    fill(80, 165, 40);
    text("Player 3", 250, 224);
    fill(230, 220, 60);
    text("Player 4", 350, 224);
    
    drawBanner("CLICK TO CONTINUE", 300);
    
    if (mouseIsPressed && mouseButton !== RIGHT) {
        setGameState(2);
    }
};

var characterSelection = function() {
    background(245, 245, 245);
    
    noStroke();
    fill(55, 55, 55);
    rect(0, 25, 400, 175);
    
    var btns = [];
    var addButton = function(x, y, width, length, character) {
        rect(x, y, width, length);
        append(btns, x + "|" + y + "|" + width + "|" + length + "|" + character);
    };
    fill(160, 160, 160);
    addButton(5, 30, 93.75, 70, 1);
    addButton(103.75, 30, 93.75, 70, 2);
    addButton(202.75, 30, 93.75, 70, 3);
    addButton(301.75, 30, 93.75, 70, 4);
    addButton(5, 115, 93.75, 70, 5);
    addButton(103.75, 115, 93.75, 70, 6);
    addButton(202.75, 115, 93.75, 70, 7);
    addButton(301.75, 115, 93.75, 70, 8);
    
    drawSprite(1, 0, 35, 40, 3);
    drawSprite(2, 0, 135, 40, 3);
    drawSprite(3, 0, 225, 45, 3);
    drawSprite(4, 0, 325, 45, 3);
    drawSprite(5, 0, 20, 125, 3);
    drawSprite(6, 0, 175, 128, 3);
    drawSprite(7, 0, 225, 125, 3);
    drawSprite(8, 0, 365, 165, 3);
    
    textAlign(CENTER, CENTER);
    textFont("impact", 20);
    fill(255, 255, 255);
    text("MARIO", 52, 103);
    text("LINK", 152, 103);
    text("KIRBY", 252, 103);
    text("SAMUS", 352, 103);
    text("MEGA MAN", 52, 188);
    text("PIT", 152, 188);
    text("R.O.B.", 252, 188);
    text("RANDOM", 352, 188);
    
    var drawSelection = function(player) {
        var x = 10;
        var p = 4;
        
        if (player === players.one) {
            x = 10;
            p = 0;
        } else if (player === players.two) {
            x = 105;
            p = 1;
        } else if (player === players.three) {
            x = 200;
            p = 2;
        } else if (player === players.four) {
            x = 295;
            p = 3;
        }
        
        if (getPlayerController(player) === 0) {
            fill(225, 225, 225);
            rect(x, 255, 93, 135);
            textSize(14);
            textAlign(CENTER, CENTER);
            fill(90, 90, 90);
            text("PRESS", x + 46.5, 300);
            text("ANY BUTTON", x + 46.5, 315);
        } else {
            fill(getPlayerColor(player)[0], getPlayerColor(player)[1], getPlayerColor(player)[2]);
            rect(x, 280, 93, 110);
            arc(x + 25, 280, 50, 50, 180, 270);
            
            fill(245, 245, 245, 200);
            rect(x + 5, 365, 83, 20, 5);
            fill(getPlayerColor(player)[0], getPlayerColor(player)[1], getPlayerColor(player)[2]);
            
            if (getPlayerController(player) === 2) {
                rect(x + 93, 255, -70, 25);
                
                fill(60, 60, 60);
                textSize(15);
                text("Player " + (p + 1), x + 45, 375);
                drawSprite(selection[p], 1, x + 57 + getSpriteCollision(selection[p], 1, 2.5)[0] / 4, 330 + getSpriteCollision(selection[p], 1, 2.5)[1] / 4, 2.5);
            } else {
                rect(x + 93, 255, -93, 25);
                
                fill(60, 60, 60);
                textSize(15);
                text("CPU " + (p + 1), x + 45, 375);
            }
        }
    };
    drawSelection(players.one);
    drawSelection(players.two);
    drawSelection(players.three);
    drawSelection(players.four);
    
    // Show banner
    var chosen = 0;
    for (var i = 0; i < allPlayers.length; i++) {
        if (getPlayerController(allPlayers[i]) !== 2) {
            continue;
        }
        
        if (selection[i] !== undefined) {
            chosen++;
        }
    }
    if (chosen >= 2) {
        drawBanner("CLICK 'ENTER' TO CONTINUE", 202);
        
        if (keys[13]) {
            setPlayerSpriteType(players.one, selection[0]);
            setPlayerSpriteType(players.two, selection[1]);
            setPlayerSpriteType(players.three, selection[2]);
            setPlayerSpriteType(players.four, selection[3]);
            
            cursorX = 100; cursorY = 160;
            
            if (getGameMap() === 0) {
                setGameState(3);
                setup1 = false;
            } else {
                setGameState(4);
            }
        }
    }
    
    // Settings button
    var drawSettings = function() {
        noStroke();
        fill(105, 105, 105);
        quad(120, 5, 90, 25, 300, 25, 300, 5);
        fill(55, 55, 55);
        quad(270, 5, 250, 25, 410, 25, 410, 5);
        fill(255, 255, 255);
        textSize(18);
        var mString = "";
        var aString = "";
        var aAmount = 0;
        if (getGameRulesMode() === 0) {
            mString = "Stock";
            aAmount = getGameRulesLives();
            
            if (getGameRulesLives() === 1) {
                aString = "live";
            } else {
                aString = "lives";
            }
        } else if (getGameRulesMode() === 1) {
            mString = "Time";
            aAmount = getGameRulesTime();
            
            if (getGameRulesLives() === 1) {
                aString = "min";
            } else {
                aString = "mins";
            }
        }
        text(mString, 190, 15);
        text(aAmount + " " + aString, 332, 15);
        fill(194, 194, 194);
        triangle(280, 15, 290, 10, 290, 20);
        triangle(380, 15, 370, 10, 370, 20);
    };
    drawSettings();
    
    // Cursor movement
    for (var i = 0; i < allPlayers.length; i++) {
        if (getPlayerController(allPlayers[i]) !== 2) {
            setPlayerLoc(allPlayers[i], 200, 200);
        }
        
        if (anyMoveKeyIsPressed(allPlayers[i])) {
            setPlayerController(allPlayers[i], 2);
        }
        
        if (upIsPressed(allPlayers[i])) {
            if (getPlayerLoc(allPlayers[i])[1] > 0) {
                movePlayer(allPlayers[i], "UP", 2.5);
            }
        }
        
        if (downIsPressed(allPlayers[i])) {
            if (getPlayerLoc(allPlayers[i])[1] < 400) {
                movePlayer(allPlayers[i], "DOWN", 2.5);
            }
        }
        
        if (leftIsPressed(allPlayers[i])) {
            if (getPlayerLoc(allPlayers[i])[0] > 0) {
                movePlayer(allPlayers[i], "LEFT", 2.5);
            }
        }
        
        if (rightIsPressed(allPlayers[i])) {
            if (getPlayerLoc(allPlayers[i])[0] < 400) {
                movePlayer(allPlayers[i], "RIGHT", 2.5);
            }
        }
        
        if (getPlayerController(allPlayers[i]) === 2) {
            drawSprite(0, i, getPlayerLoc(allPlayers[i])[0], getPlayerLoc(allPlayers[i])[1], 30);
        }
    }
    
    // Settings button pressed
    for (var i = 0; i < allPlayers.length; i++) {
        var playerX = getPlayerLoc(allPlayers[i])[0];
        var playerY = getPlayerLoc(allPlayers[i])[1];
        
        if (anyAttackKeyIsReleased(allPlayers[i])) {
            if (playerX >= 100 && playerX <= 260 && playerY >= 5 && playerY <= 25) {
                if (getGameRulesMode() === 0) {
                    setGameRulesMode(1);
                } else {
                    setGameRulesMode(0);
                }
            } else if (playerX >= 275 && playerX <= 300 && playerY >= 5 && playerY <= 25) {
                if (getGameRulesMode() === 0) {
                    if ((getGameRulesLives() - 1) >= 1) {
                        setGameRulesLives(getGameRulesLives() - 1);
                    }
                } else {
                    if ((getGameRulesTime() - 1) >= 1) {
                        setGameRulesTime(getGameRulesTime() - 1);
                    }
                }
            } else if (playerX >= 365 && playerX <= 390 && playerY >= 5 && playerY <= 25) {
                if (getGameRulesMode() === 0) {
                    if ((getGameRulesLives() + 1) <= 5) {
                        setGameRulesLives(getGameRulesLives() + 1);
                    }
                } else {
                    if ((getGameRulesTime() + 1) <= 5) {
                        setGameRulesTime(getGameRulesTime() + 1);
                    }
                }
            }
        }
    }
    
    // Button presses
    for (var p = 0; p < allPlayers.length; p++) {
        if (anyAttackKeyIsPressed(allPlayers[p])) {
            for (var i = 0; i < btns.length; i++) {
                var x = parseInt(btns[i].split("|")[0], null);
                var y = parseInt(btns[i].split("|")[1], null);
                var width = parseInt(btns[i].split("|")[2], null);
                var length = parseInt(btns[i].split("|")[3], null);
                var character = parseInt(btns[i].split("|")[4], null);
                
                var playerX = getPlayerLoc(allPlayers[p])[0];
                var playerY = getPlayerLoc(allPlayers[p])[1];
                
                if (playerX > x && playerX < (x + width) && playerY > y && playerY < (y + length)) {
                    selection[p] = character;
                }
            }
        }
    }
    
    // Remove player button pressed
    var displayX = [10, 105, 200, 295];
    for (var p = 0; p < allPlayers.length; p++) {
        if (anyAttackKeyIsPressed(allPlayers[p])) {
            for (var i = 0; i < displayX.length; i ++) {
                var playerX = getPlayerLoc(allPlayers[p])[0];
                var playerY = getPlayerLoc(allPlayers[p])[1];
                // rect(displayX[p], 255, 93, 135);
                
                if (playerX > displayX[p] && playerX < (displayX[p] + 93) && playerY > 255 && playerY < 390) {
                    // TODO set controller
                    // TODO set loc back to 200, 200
                    setPlayerLoc(allPlayers[p], 200, 200);
                    setPlayerController(allPlayers[p], 0);
                }
            }
        }
    }
};

var mapSelection = function() {
    var btns = [];
    var addButton = function(x, y, width, length, map) {
        if (map === 1) {
            fill(11, 32, 46, 250);
        } else if (map === 2) {
            fill(0, 0, 0);
        } else if (map === 3) {
            fill(8, 190, 240);
        } else {
            fill(120, 120, 120, 155);
        }
        rect(x, y, width, length);
        
        fill(120, 120, 120, 100);
        rect(x, y, width, length);
        
        pushMatrix();
        translate(x + 15, y);
        scale(0.17);
        drawMapForeground(map, 0, 0);
        popMatrix();
        append(btns, x + "|" + y + "|" + width + "|" + length + "|" + map);
    };
    
    background(245, 245, 245);
    var mapIcon = function() {
        if (ms === 6) {
            noStroke();
            fill(240, 230, 100);
            rect(40, 80, 120, 150);
            drawSprite(8, 0, 140, 200, 10);
        } else {
            pushMatrix();
            scale(0.5);
            drawMapForeground(ms, 0, 100);
            popMatrix();
        }
    };
    mapIcon();
    
    noStroke();
    fill(205, 35, 35);
    rect(0, 10, 50, 30);
    fill(55, 55, 55);
    rect(50, 10, 145, 30);
    rect(0, 40, 145, 20);
    triangle(145, 40, 145, 60, 175, 40);
    triangle(195, 10, 195, 40, 245, 10);
    fill(205, 35, 35);
    triangle(50, 10, 50, 40, 110, 10);
    
    textFont("impact", 10);
    fill(255, 255, 255);
    text("GO BACK", 65, 25);
    
    fill(55, 55, 55);
    triangle(10, 25, 25, 35, 25, 15);
    rect(20, 22.5, 20, 5);
    fill(255, 255, 255);
    
    // Draw player selections
    for (var p = 0; p < allPlayers.length; p++) {
        if (getPlayerController(allPlayers[p]) === 0) {
            continue;
        }
        
        if (getPlayerSpriteType(allPlayers[p]) === undefined) {
            setPlayerSpriteType(allPlayers[p], 8);
            selection[p] = 8;
        }
        
        if (getPlayerSpriteType(allPlayers[p]) === 8) {
            drawSprite(8, 0, 20 + (40 * p), 52.5, 1);
        } else {
            drawSprite(getPlayerSpriteType(allPlayers[p]), 0, 20 + (30 * p), 40, 1);
        }
    }
    
    fill(145, 145, 145);
    quad(110, 15, 75, 35, 190, 35, 225, 15);
    fill(255, 255, 255);
    textSize(15);
    text("Stage Select", 150, 24);
    
    addButton(200, 70, 93.75, 70, 1);
    addButton(300, 70, 93.75, 70, 2);
    addButton(200, 145, 93.75, 70, 3);
    addButton(300, 145, 93.75, 70, 4);
    addButton(200, 220, 93.75, 70, 5);
    addButton(300, 220, 93.75, 70, 6);
    
    // Back Button
    if (anyAttackKeyIsPressed(players.one) && cursorX >= 0 && cursorX <= 100 && cursorY >= 10 && cursorY <= 40) {
        setGameState(2);
    }
    
    // Other Butons
    for (var i = 0; i < btns.length; i++) {
        var x = parseInt(btns[i].split("|")[0], null);
        var y = parseInt(btns[i].split("|")[1], null);
        var width = parseInt(btns[i].split("|")[2], null);
        var length = parseInt(btns[i].split("|")[3], null);
        var map = parseInt(btns[i].split("|")[4], null);
        
        if (cursorX >= x && cursorX <= (x + width) && cursorY >= y && cursorY <= (y + length)) {
            ms = map;
            
            if (anyAttackKeyIsPressed(players.one)) {
                setGameMap(ms);
                setGameState(4);
            }
        }
    }
    
    noStroke();
    fill(0, 0, 0);
    rect(0, 245, 200, 35);
    fill(255, 255, 255);
    textFont("times", 20);
    text(getMapName(ms).toUpperCase(), 100, 262.5);
    
    // Cursor
    var radius = 30;
    if (upIsPressed(players.one)) {
        if (cursorY - radius / 2 > 0) {
            cursorY -= 2.5;
        }
    }
    if (downIsPressed(players.one)) {
        if (cursorY + radius / 2 < 400) {
            cursorY += 2.5;
        }
    }
    if (leftIsPressed(players.one)) {
        if (cursorX - radius / 2 > 0) {
            cursorX -= 2.5;
        }
    }
    if (rightIsPressed(players.one)) {
        if (cursorX + radius / 2 < 400) {
            cursorX += 2.5;
        }
    }
    drawSprite(0, 0, cursorX, cursorY, radius);
};

var battle = function() {
    // Setup
    // TODO random maps: 4, 5, 6
    while(setup1 === false) {
        setGameRulesTime(getGameRulesTime() * 60);
        for (var p = 0; p < allPlayers.length; p++) {
            if (getPlayerSpriteType(allPlayers[p]) === 8) {
                var type = floor(random(1, 8));
                if (type > 7) {
                    type = 7;
                }
                
                if (type < 1) {
                    type = 1;
                }
                setPlayerSpriteType(allPlayers[p], type);
            }
        }
        
        if (getGameMap() === 4 || getGameMap() === 5 || getGameMap() === 6) {
            var map = floor(random(0, 4));
            if (map > 3) {
                map = 3;
            }
            
            if (map < 0) {
                map = 0;
            }
            setGameMap(map);
        }
        
        setPlayerLives(players.one, getGameRulesLives());
        setPlayerLives(players.two, getGameRulesLives());
        setPlayerLives(players.three, getGameRulesLives());
        setPlayerLives(players.four, getGameRulesLives());
        
        setPlayerLoc(players.one, getMapSpawnsX(getGameMap())[0], getMapSpawnsY(getGameMap())[0]);
        setPlayerLoc(players.two, getMapSpawnsX(getGameMap())[1], getMapSpawnsY(getGameMap())[1]);
        setPlayerLoc(players.three, getMapSpawnsX(getGameMap())[2], getMapSpawnsY(getGameMap())[2]);
        setPlayerLoc(players.four, getMapSpawnsX(getGameMap())[3], getMapSpawnsY(getGameMap())[3]);
        setup1 = true;
    }
    
    background(255, 255, 255);
    
    // Draw map
    noStroke();
    noFill();
    strokeWeight(1);
    drawMapBackdrop(getGameMap(), 0, 0);
    drawMapForeground(getGameMap(), 0, 0);
    
    var rankPlayer = function(player) {
        var players = 0;
        var p = 4;
        
        for (var i = 0; i < allPlayers.length; i++) {
            if (allPlayers[i] === player) {
                p = i;
            }
            
            if (getPlayerController(allPlayers[i]) === 0) {
                continue;
            }
            
            players++;
        }
        
        ranking[p] = players;
    };
    
    // Manages all player activities such as: movement, death and attacking
    var playerManager = function() {
        for (var i = 0; i < allPlayers.length; i++) {
            if (cooldownStandard[i] > 0) {
                cooldownStandard[i] -= 1;
            }
            
            if (cooldownStandard[i] < 0) {
                cooldownStandard[i] = 0;
            }
            
            if (getPlayerController(allPlayers[i]) === 0) {
                continue;
            }
            
            // Attack
            anyAttackKeyIsReleased(allPlayers[i]);
            if (anyAttackKeyIsPressedOnce(allPlayers[i])) {
                playSound(getSound("rpg/battle-swing"));
            }
            
            if (wait && anyAttackKeyIsPressed(allPlayers[i]) && specialIsPressed(allPlayers[i]) && !downIsPressed(allPlayers[i]) && kirbyPower[i] === 0 && cooldownStandard[i] === 0) {
                if (kirbyPower[i] === 0 || kirbyPower[i] === 3) {
                    for (var p = 0; p < allPlayers.length; p++) {
                        if (p === i || getPlayerSpriteType(allPlayers[p]) === 3) {
                            continue;
                        }
                        
                        var victimX = getPlayerLoc(allPlayers[p])[0];
                        var victimY = getPlayerLoc(allPlayers[p])[1];
                        var victimWidth = getPlayerSpriteCollision(allPlayers[p])[0];
                        var victimHeight = getPlayerSpriteCollision(allPlayers[p])[1];
                        var suckX = getPlayerLoc(allPlayers[i])[0];
                        var suckY = getPlayerLoc(allPlayers[i])[1];
                        var kirbyX = getPlayerLoc(allPlayers[i])[0] - 5;
                        var kirbyY = getPlayerLoc(allPlayers[i])[1] - 5;
                        var kirbyWidth = getPlayerSpriteCollision(allPlayers[i])[0] + 10;
                        var kirbyHeight = getPlayerSpriteCollision(allPlayers[i])[1] + 10;
                        var dir = -1;
                        
                        if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                            suckX = getPlayerLoc(allPlayers[i])[0] + getPlayerSpriteCollision(allPlayers[i])[0];
                            dir = 1;
                        }
                        
                        if (dir === 1 && victimX + victimWidth > suckX && victimX < (suckX + 80) && victimY + victimHeight > suckY && victimY < (suckY + 30)) {
                            setPlayerVelocity(allPlayers[p], -3 * dir, getPlayerVelocity(allPlayers[p])[1]);
                        }
                        
                        if (dir === -1 && victimX + victimWidth < suckX && victimX > (suckX - 80) && victimY + victimHeight > suckY && victimY < (suckY + 30)) {
                            setPlayerVelocity(allPlayers[p], -3 * dir, getPlayerVelocity(allPlayers[p])[1]);
                        }
                        
                        if (kirbyX < victimX + victimWidth && kirbyX + kirbyWidth > victimX && kirbyY < victimY + victimHeight && kirbyY + kirbyHeight > victimY) {
                            setPlayerDamage(allPlayers[p], getPlayerDamage(allPlayers[p]) + 3);
                            lastHitBy[p] = i;
                            
                            var damageMultiplier = 1 + (getPlayerDamage(allPlayers[p]) / 100);
                            
                            if (downIsPressed(allPlayers[i])) {
                                if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                                    setPlayerVelocity(allPlayers[p], 3 * damageMultiplier, 15 * damageMultiplier);
                                } else {
                                    setPlayerVelocity(allPlayers[p], -3 * damageMultiplier, 15 * damageMultiplier);
                                }
                            } else {
                                if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                                    setPlayerVelocity(allPlayers[p], 7 * damageMultiplier, -7 * damageMultiplier);
                                } else {
                                    setPlayerVelocity(allPlayers[p], -7 * damageMultiplier, -7 * damageMultiplier);
                                }
                            }
                            
                            kirbyPower[i] = getPlayerSpriteType(allPlayers[p]);
                        }
                    }
                }
            }
            
            anyAttackKeyIsReleased(allPlayers[i]);
            if (wait) {
                if (standardIsPressed(allPlayers[i]) && cooldownStandard[i] <= 0) {
                    var hit = false;
                    
                    for (var p = 0; p < allPlayers.length; p++) {
                        if (p === i) {
                            continue;
                        }
                    
                        var ix = getPlayerLoc(allPlayers[i])[0];
                        var iy = getPlayerLoc(allPlayers[i])[1];
                        var icollision = getPlayerSpriteCollision(allPlayers[i]);
                        
                        var px = getPlayerLoc(allPlayers[p])[0];
                        var py = getPlayerLoc(allPlayers[p])[1];
                        var pcollision = getPlayerSpriteCollision(allPlayers[p]);
                        
                        if (downIsPressed(allPlayers[i])) {
                            cooldownStandard[i] = 40;
                        } else {
                            cooldownStandard[i] = 20;
                        }
                        
                        cooldownStandard[p] = 60;
                        
                        if (px <= ix + icollision[0] && px + pcollision[0] >= ix && py <= iy + icollision[1] && py + pcollision[1] >= iy) {
                            hit = true;
                            
                            if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                                setPlayerVelocity(allPlayers[i], 3, getPlayerVelocity(allPlayers[i])[1]);
                            } else {
                                setPlayerVelocity(allPlayers[i], -3, getPlayerVelocity(allPlayers[i])[1]);
                            }
                            
                            setPlayerDamage(allPlayers[p], getPlayerDamage(allPlayers[p]) + 3);
                            lastHitBy[p] = i;
                            
                            var damageMultiplier = 1 + (getPlayerDamage(allPlayers[p]) / 100);
                            
                            if (downIsPressed(allPlayers[i])) {
                                if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                                    setPlayerVelocity(allPlayers[p], 3 * damageMultiplier, 15 * damageMultiplier);
                                } else {
                                    setPlayerVelocity(allPlayers[p], -3 * damageMultiplier, 15 * damageMultiplier);
                                }
                            } else {
                                if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                                    setPlayerVelocity(allPlayers[p], 7 * damageMultiplier, -7 * damageMultiplier);
                                } else {
                                    setPlayerVelocity(allPlayers[p], -7 * damageMultiplier, -7 * damageMultiplier);
                                }
                            }
                        } else {
                            if (hit === false) {
                                if (downIsPressed(allPlayers[i])) {
                                    setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0], 15);
                                } else {
                                    if (rightIsPressed(allPlayers[i])) {
                                        setPlayerVelocity(allPlayers[i], 10, getPlayerVelocity(allPlayers[i])[1]);
                                    } else if (leftIsPressed(allPlayers[i])) {
                                        setPlayerVelocity(allPlayers[i], -10, getPlayerVelocity(allPlayers[i])[1]);
                                    }
                                }
                            }
                        }
                    }
                } else if (specialIsPressed(allPlayers[i])) {
                    if (projectiles[i] === undefined) {
                        var projDir = LEFT;
                        if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                            projDir = RIGHT;
                        }
                        
                        if (getPlayerSpriteType(allPlayers[i]) === 3) {
                            if (kirbyPower[i] !== 0 && kirbyPower[i] !== 3) {
                                var proj = new projectile(i, getPlayerLoc(allPlayers[i])[0] + (getPlayerSpriteCollision(allPlayers[i])[0] / 2), getPlayerLoc(allPlayers[i])[1] + (getPlayerSpriteCollision(allPlayers[i])[1] / 2), kirbyPower[i], 0, projDir);
                            }
                        } else {
                            var proj = new projectile(i, getPlayerLoc(allPlayers[i])[0] + (getPlayerSpriteCollision(allPlayers[i])[0] / 2), getPlayerLoc(allPlayers[i])[1] + (getPlayerSpriteCollision(allPlayers[i])[1] / 2), getPlayerSpriteType(allPlayers[i]), 0, projDir);
                        }
                    }
                }
            }
            
            var proj = projectiles[i];
            if (wait && proj !== undefined) {
                proj.draw();
                proj.move(300 / fps);
                
                for (var p = 0; p < allPlayers.length; p++) {
                    if (p === i || getPlayerController(allPlayers[p]) === 0) {
                        continue;
                    }
                    
                    if (proj.collision(getPlayerLoc(allPlayers[p])[0], getPlayerLoc(allPlayers[p])[1], getPlayerSpriteCollision(allPlayers[p])[0], getPlayerSpriteCollision(allPlayers[p])[1])) {
                        projectiles[i] = undefined;
                        setPlayerDamage(allPlayers[p], getPlayerDamage(allPlayers[p]) + 5);
                        
                        var damageMultiplier = 1 + (getPlayerDamage(allPlayers[p]) / 100);
                        if (getPlayerSpriteData(allPlayers[i]) % 2 === 1) {
                            setPlayerVelocity(allPlayers[p], 5 * damageMultiplier, -5 * damageMultiplier);
                        } else {
                            setPlayerVelocity(allPlayers[p], -5 * damageMultiplier, -5 * damageMultiplier);
                        }
                    }
                }
            }
            
            if (downIsPressed(allPlayers[i])) {
                if (getPlayerVelocity(allPlayers[i])[1] < 10) {
                    setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0], getPlayerVelocity(allPlayers[i])[1] + 0.5);
                }
            } else {
                if (getPlayerVelocity(allPlayers[i])[1] < 5) {
                    setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0], getPlayerVelocity(allPlayers[i])[1] + 0.5);
                }
            }
        
            upIsReleased(allPlayers[i]);
            
            if (upIsPressedOnce(allPlayers[i]) && getPlayerVelocity(allPlayers[i])[1] > -8) {
                if (jumps[i] > 0) {
                    playSound(getSound("retro/jump1"));
                    if (getPlayerSpriteJumps(allPlayers[i]) - jumps[i] < 2) {
                        setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0], -8);
                    } else {
                        if (getPlayerSpriteType(allPlayers[i]) === 3) {
                            setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0], -4);
                        } else {
                            setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0], -5);
                        }
                    }
                    
                    jumps[i]--;
                }
            }
            
            if (getPlayerVelocity(allPlayers[i])[0] < 0) {
                setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0] + 0.6, getPlayerVelocity(allPlayers[i])[1]);
            }
            
            if (getPlayerVelocity(allPlayers[i])[0] > 0) {
                setPlayerVelocity(allPlayers[i], getPlayerVelocity(allPlayers[i])[0] - 0.6, getPlayerVelocity(allPlayers[i])[1]);
            }
            
            if (!downIsPressed(allPlayers[i]) && leftIsPressed(allPlayers[i]) && (getPlayerVelocity(allPlayers[i])[0] >= -3 && getPlayerVelocity(allPlayers[i])[0] <= 3)) {
                setPlayerVelocity(allPlayers[i], -3, getPlayerVelocity(allPlayers[i])[1]);
            }
            
            if (!downIsPressed(allPlayers[i]) && rightIsPressed(allPlayers[i]) && (getPlayerVelocity(allPlayers[i])[0] >= -3 && getPlayerVelocity(allPlayers[i])[0] <= 3)) {
                setPlayerVelocity(allPlayers[i], 3, getPlayerVelocity(allPlayers[i])[1]);
            }
            
            // Collision
            airborn[i] = true;
            for (var c = 0; c < getMapPlatforms(getGameMap(), 0, 0).length; c++) {
                var x = parseInt(getMapPlatforms(getGameMap(), 0, 0)[c].split("|")[0], null);
                var y = parseInt(getMapPlatforms(getGameMap(), 0, 0)[c].split("|")[1], null);
                var width = parseInt(getMapPlatforms(getGameMap(), 0, 0)[c].split("|")[2], null);
                var height = parseInt(getMapPlatforms(getGameMap(), 0, 0)[c].split("|")[3], null);
                
                var playerX = getPlayerLoc(allPlayers[i])[0] + getPlayerVelocity(allPlayers[i])[0];
                var playerY = getPlayerLoc(allPlayers[i])[1] + getPlayerVelocity(allPlayers[i])[1];
                var playerWidth = getPlayerSpriteCollision(allPlayers[i])[0];
                var playerHeight = getPlayerSpriteCollision(allPlayers[i])[1];
                
                if (playerX < (x + width) && (playerX + playerWidth) > x && playerY < (y + height) && (playerY + playerHeight) > y) {
                    jumps[i] = getPlayerSpriteJumps(allPlayers[i]);
                    airborn[i] = false;
                    var setX = getPlayerVelocity(allPlayers[i])[0];
                    var setY = getPlayerVelocity(allPlayers[i])[1];
                    
                    if (playerX < x || (playerX + playerWidth) > x + width) {
                        setX = 0;
                    }
                    
                    if (playerY < y || (playerY + playerHeight) > y + height) {
                        setY = 0;
                    }
                    
                    if (playerX < x) {
                        if (getPlayerVelocity(allPlayers[i])[0] < 0) {
                            setX = getPlayerVelocity(allPlayers[i])[0];
                        }
                    } else if (playerX + playerWidth > x + width) {
                        if (getPlayerVelocity(allPlayers[i])[0] > 0) {
                            setX = getPlayerVelocity(allPlayers[i])[0];
                        }
                    }
                    
                    if (playerY < y) {
                        if (getPlayerVelocity(allPlayers[i])[1] < 0) {
                            setY = getPlayerVelocity(allPlayers[i])[1];
                        }
                    } else if (playerY + playerWidth > y + height) {
                        if (getPlayerVelocity(allPlayers[i])[1] > 0) {
                            setY = getPlayerVelocity(allPlayers[i])[1];
                        }
                    }
                    
                    setPlayerVelocity(allPlayers[i], setX, setY);
                }
            }
            
            // Death (Out of bounds)
            var boundaries = 800;
            if (getPlayerLoc(allPlayers[i])[0] > boundaries || getPlayerLoc(allPlayers[i])[0] < -(boundaries - 400) || getPlayerLoc(allPlayers[i])[1] > boundaries || getPlayerLoc(allPlayers[i])[1] < -(boundaries - 400)) {
                if (getGameRulesMode() === 0) {
                    if (getPlayerLives(allPlayers[i]) > 1) {
                        setPlayerLives(allPlayers[i], getPlayerLives(allPlayers[i]) - 1);
                        setPlayerDamage(allPlayers[i], 0);
                        setPlayerVelocity(allPlayers[i], 0, 0);
                        setPlayerLoc(allPlayers[i], getMapSpawnsX(getGameMap())[i], getMapSpawnsY(getGameMap())[i]);
                        kirbyPower[i] = 0;
                        anim[i] = undefined;
                        playSound(getSound("retro/boom2")); // Sound effect
                    } else {
                        rankPlayer(allPlayers[i]);
                        setPlayerController(allPlayers[i], 0);
                    }
                } else if (getGameRulesMode() === 1) {
                    score[i]--;
                    
                    if (lastHitBy[i] !== 4 && lastHitBy[i] !== i) {
                        score[lastHitBy[i]]++;
                    }
                    
                    lastHitBy[i] = 4;
                    setPlayerDamage(allPlayers[i], 0);
                    setPlayerVelocity(allPlayers[i], 0, 0);
                    setPlayerLoc(allPlayers[i], getMapSpawnsX(getGameMap())[i], getMapSpawnsY(getGameMap())[i]);
                }
            }
            
            if (getPlayerVelocity(allPlayers[i])[0] <= 0.9 && getPlayerVelocity(allPlayers[i])[0] >= -0.9) {
                setPlayerVelocity(allPlayers[i], 0, getPlayerVelocity(allPlayers[i])[1]);
            }
            
            movePlayer(allPlayers[i], "RIGHT", getPlayerVelocity(allPlayers[i])[0]);
            movePlayer(allPlayers[i], "DOWN", getPlayerVelocity(allPlayers[i])[1]);
        }
    };
    playerManager();
    wait = true;
    
    // Draw players
    for (var p = 0; p < allPlayers.length; p++) {
        if (getPlayerController(allPlayers[p]) === 0) {
            continue;
        }
        
        if (anim[p] === undefined) {
            if (p === 0 || p === 1) {
                anim[p] = 1;
            } else {
                anim[p] = 2;
            }
        }
        
        if (downIsPressed(allPlayers[p])) {
            if (anim[p] === 2 || anim[p] === 6 || anim[p] === 8) {
                anim[p] = 4;
            }
            
            if (anim[p] === 1 || anim[p] === 5 || anim[p] === 7) {
                anim[p] = 3;
            }
            
            if (leftIsPressed(allPlayers[p])) {
                anim[p] = 4;
            }
            
            if (rightIsPressed(allPlayers[p])) {
                anim[p] = 3;
            }
        } else {
            if (airborn[p]) {
                if (anim[p] === 2) {
                    anim[p] = 6;
                }
                
                if (anim[p] === 1) {
                    anim[p] = 5;
                }
                
                if (leftIsPressed(allPlayers[p])) {
                    anim[p] = 6;
                }
                
                if (rightIsPressed(allPlayers[p])) {
                    anim[p] = 5;
                }
            } else {
                if (anim[p] === 4 || anim[p] === 6 || anim[p] === 8) {
                    anim[p] = 2;
                }
                
                if (anim[p] === 3 || anim[p] === 5 || anim[p] === 7) {
                    anim[p] = 1;
                }
                
                if (leftIsPressed(allPlayers[p])) {
                    anim[p] = 2;
                }
                
                if (rightIsPressed(allPlayers[p])) {
                    anim[p] = 1;
                }
                
                if (specialIsPressed(allPlayers[p]) && getPlayerSpriteType(allPlayers[p]) === 3 && kirbyPower[p] === 0) {
                    if (anim[p] === 4 || anim[p] === 6 || anim[p] === 2) {
                        anim[p] = 8;
                    }
                    
                    if (anim[p] === 3 || anim[p] === 5 || anim[p] === 1) {
                        anim[p] = 7;
                    }
                    
                    if (leftIsPressed(allPlayers[p])) {
                        anim[p] = 8;
                    }
                    
                    if (rightIsPressed(allPlayers[p])) {
                        anim[p] = 7;
                    }
                }
            }
        }
        
        setPlayerSize(allPlayers[p], 2);
        setPlayerSpriteData(allPlayers[p], anim[p]);
        
        var pX = getPlayerLoc(allPlayers[p])[0];
        var pY = getPlayerLoc(allPlayers[p])[1];
        var pWidth = getPlayerSpriteCollision(allPlayers[p])[0];
        var pHeight = getPlayerSpriteCollision(allPlayers[p])[1];
        
        if (pX > 400 || pY > 400 || (pX + pWidth) < 0 || (pY + pHeight) < 0) {
            continue;
        }
        
        drawPlayer(allPlayers[p]);
    }
    
    var drawIndicators = function() {
        for (var i = 0; i < allPlayers.length; i++) {
            if (getPlayerController(allPlayers[i]) === 0) {
                continue;
            }
            
            var x = getPlayerLoc(allPlayers[i])[0];
            var y = getPlayerLoc(allPlayers[i])[1];
            var width = getPlayerSpriteCollision(allPlayers[i])[0];
            var height = getPlayerSpriteCollision(allPlayers[i])[1];
            
            if (x > 400 || (x + width) < 0 || y > 400 || (y + height) < 0) {
                drawIndicator(allPlayers[i]);
            }
        }
    };
    
    var first = [];
    var firstScore = -999;
    var second = [];
    var secondScore = -999;
    var third = [];
    var thirdScore = -999;
    var fourth = [];
        
    // Check if game is over
    if (getGameRulesMode() === 0) {
        var pls = 0;
        for (var p = 0; p < allPlayers.length; p++) {
            if (getPlayerController(allPlayers[p]) === 0) {
                continue;
            }
            
            pls++;
        }
        if (pls <= 1) {
            for (var p = 0; p < allPlayers.length; p++) {
                if (getPlayerController(allPlayers[p]) !== 0) {
                    rankPlayer(allPlayers[p]);
                }
            }
                            
            setGameState(5);
        } else {
            drawUI();
            drawIndicators();
        }
    } else if (getGameRulesMode() === 1) {
        setGameRulesTime(getGameRulesTime() - 1/fps);
        if (getGameRulesTime() <= 0) {
            for (var pl = 0; pl < allPlayers.length; pl++) {
                if (getPlayerController(allPlayers[pl]) === 0) {
                    continue;
                }
                
                if (score[pl] > firstScore) {
                    thirdScore = secondScore;
                    secondScore = firstScore;
                    
                    firstScore = score[pl];
                } else if (score[pl] > secondScore) {
                    thirdScore = secondScore;
                    
                    secondScore = score[pl];
                } else if (score[pl] > thirdScore) {
                    thirdScore = score[pl];
                }
            }
            for (var pl = 0; pl < allPlayers.length; pl++) {
                if (getPlayerController(allPlayers[pl]) === 0) {
                    continue;
                }
                
                if (score[pl] >= firstScore) {
                    append(first, pl);
                } else if (score[pl] >= secondScore) {
                    append(second, pl);
                } else if (score[pl] >= thirdScore) {
                    append(third, pl);
                } else {
                    append(fourth, pl);
                }
            }
            
            if (first.length >= 2) {
                for (var p = 0; p < allPlayers.length; p++) {
                    if (score[p] < firstScore) {
                        setPlayerController(allPlayers[p], 0);
                    } else {
                        setPlayerLives(allPlayers[p], 1);
                        setPlayerDamage(allPlayers[p], 300);
                    }
                }
                
                setGameRulesMode(0);
                return;
            } else {
                for (var f = 0; f < allPlayers.length; f++) {
                    ranking[first[f]] = 1;
                }
                
                for (var s = 0; s < allPlayers.length; s++) {
                    ranking[second[s]] = 2;
                }
                
                for (var t = 0; t < allPlayers.length; t++) {
                    ranking[third[t]] = 3;
                }
                
                for (var f = 0; f < allPlayers.length; f++) {
                    ranking[fourth[f]] = 4;
                }
            }
            
            setGameState(5);
        } else {
            drawUI();
            drawIndicators();
        }
    }
};

var winner = function() {
    if (gameTimer < 200) {
        textFont("impact", 100);
        textAlign(CENTER, CENTER);
        
        if (getGameRulesMode() === 1) {
            fill(230, 230, 230);
            text("TIME!", 200, 200);
            textSize(97);
            fill(90, 100, 240);
            text("TIME!", 200, 200);
        } else {
            fill(230, 230, 230);
            text("GAME!", 200, 200);
            textSize(97);
            fill(86, 199, 76);
            text("GAME!", 200, 200);
        }
        
        gameTimer ++;
    } else {
        // TODO make this work pls thanks
        var firstPlace = 4;
        var secondPlace = 4;
        var thirdPlace = 4;
        var fourthPlace = 4;
        
        for (var i = 0; i < ranking.length; i++) {
            if (ranking[i] === 4) {
                fourthPlace = i;
            } else if (ranking[i] === 3) {
                thirdPlace = i;
            } else if (ranking[i] === 2) {
                secondPlace = i;
            } else if (ranking[i] === 1) {
                firstPlace = i;
            }
        }
        
        var winner = allPlayers[firstPlace];
        background(245, 245, 245);
        noStroke();
        
        drawSprite(getPlayerSpriteType(winner),1,190,290,10);
        
        fill(0, 0, 0);
        rect(0, 190, 100, 60);
        fill(getPlayerColor(winner)[0], getPlayerColor(winner)[1], getPlayerColor(winner)[2]);
        textSize(50);
        textAlign(LEFT, CENTER);
        text("P" + (firstPlace + 1), 15, 220);
        
        var characterName = getPlayerSpriteName(winner).toUpperCase();
        textAlign(CENTER, CENTER);
        fill(0, 0, 0);
        rect(0, 275, characterName.length * 25 + 50, 50);
        fill(getPlayerColor(winner)[0], getPlayerColor(winner)[1], getPlayerColor(winner)[2]);
        textSize(50);
        text(characterName, 85, 300);
        
        if (secondPlace !== 4) {
            var p = allPlayers[secondPlace];
            fill(0, 0, 0);
            rect(200, 70, 200, 80);
            fill(getPlayerColor(p)[0], getPlayerColor(p)[1], getPlayerColor(p)[2]);
            rect(200, 75, 200, 70);
            
            fill(0, 0, 0);
            rect(330, 70, 55, 30);
            fill(getPlayerColor(p)[0], getPlayerColor(p)[1], getPlayerColor(p)[2]);
            textSize(20);
            text("P" + (secondPlace + 1), 355, 85);
            drawSprite(getPlayerSpriteType(p), 0, 250, 85, 3);
        }
        
        if (thirdPlace !== 4) {
            var p = allPlayers[thirdPlace];
            fill(0, 0, 0);
            rect(225, 150, 190, 60);
            fill(getPlayerColor(p)[0], getPlayerColor(p)[1], getPlayerColor(p)[2]);
            rect(225, 155, 190, 50);
            
            fill(0, 0, 0);
            rect(330, 150, 55, 30);
            fill(getPlayerColor(p)[0], getPlayerColor(p)[1], getPlayerColor(p)[2]);
            textSize(20);
            text("P" + (thirdPlace + 1), 355, 165);
            drawSprite(getPlayerSpriteType(p), 0, 270, 165, 2);
        }
        
        if (fourthPlace !== 4) {
            var p = allPlayers[fourthPlace];
            fill(0, 0, 0);
            rect(260, 210, 170, 50);
            fill(getPlayerColor(p)[0], getPlayerColor(p)[1], getPlayerColor(p)[2]);
            rect(260, 215, 170, 40);
            
            fill(0, 0, 0);
            rect(330, 210, 55, 30);
            fill(getPlayerColor(p)[0], getPlayerColor(p)[1], getPlayerColor(p)[2]);
            textSize(20);
            text("P" + (fourthPlace + 1), 355, 225);
            drawSprite(getPlayerSpriteType(p), 0, 290, 225, 1.5);
        }
    }
};

function draw() {
	if (getGameState() === 0) {
		titleScreen();
	} else if (getGameState() === 1) {
		instructions();
	} else if (getGameState() === 2) {
		characterSelection();
	} else if (getGameState() === 3) {
		mapSelection();
	} else if (getGameState() === 4) {
		battle();
	} else if (getGameState() === 5) {
		winner();
	}
}

// Record key pressed
keyPressed = function() {
	keys[keyCode] = true;

	print(keyCode)
};
keyReleased = function() {
	keys[keyCode] = false;
};
